前端连接wssocket 有问题
* app.js
const express = require('express');
const app = express();
const expressWs = require('express-ws')(app);

const { createNewServer } = require('./createNewServer')


app.get('/', function (req, res, next) {
  res.end();
});

app.ws('/', function (ws, req) {
  createNewServer({
    host: '172.28.55.44',
    username: 'root',
    password: 'ruijie@123'
  }, ws)
});

app.listen(23000)

* createNewServer.js
const SSHClient = require('ssh2').Client;
const utf8 = require('utf8');


const createNewServer = (machineConfig, socket) => {
  const ssh = new SSHClient();
  const { host, username, password } = machineConfig;
  // 连接成功
  ssh.on('ready', function () {

    socket.send('\r\n*** SSH CONNECTION SUCCESS ***\r\n');

    ssh.shell(function (err, stream) {
      // 出错
      if (err) {
        return socket.send('\r\n*** SSH SHELL ERROR: ' + err.message + ' ***\r\n');
      }

      // 前端发送消息
      socket.on('message', function (data) {
        stream.write(data);
      });

      // 通过sh发送消息给前端
      stream.on('data', function (d) {
        socket.send(utf8.decode(d.toString('binary')));

        // 关闭连接
      }).on('close', function () {
        ssh.end();
      });
    })

    // 关闭连接
  }).on('close', function () {
    socket.send('\r\n*** SSH CONNECTION CLOSED ***\r\n');

    // 连接错误
  }).on('error', function (err) {
    socket.send('\r\n*** SSH CONNECTION ERROR: ' + err.message + ' ***\r\n');

    // 连接
  }).connect({
    port: 22,
    host,
    username,
    password
  });
}

module.exports = {createNewServer}

* frontwebssh.js
import React, { useEffect, useState } from 'react';
import { Terminal } from 'xterm';
import { WebLinksAddon } from 'xterm-addon-web-links';
import { FitAddon } from 'xterm-addon-fit';

import 'xterm/css/xterm.css';
// import styles from './index.less';

const FontSize: number = 14;
const Col = 80;

const WebTerminal = () => {
  const [webTerminal, setWebTerminal] = useState(null);
  const [ws, setWs] = useState(null);

  useEffect(() => {
    // 新增监听事件
    if (webTerminal && ws) {
      // 监听
      webTerminal.onKey(e => {
        const { key } = e;
        ws.send(key);
      });

      // ws监听
      ws.onmessage = e => {
        console.log(e);

        if (webTerminal) {
          if (typeof e.data === 'string') {
            webTerminal.write(e.data);
          } else {
            console.error('格式错误');
          }
        }
      };
    }
  }, [webTerminal, ws]);

  useEffect(() => {
    // 初始化终端

    const ele = document.getElementById('terminal');
    if (ele) {
      const height = ele.clientHeight;
      // 初始化
      const terminal = new Terminal({
        cursorBlink: true,
        cols: Col,
        rows: Math.ceil(height / FontSize),
      });

      // 辅助
      const fitAddon = new FitAddon();
      terminal.loadAddon(new WebLinksAddon());
      terminal.loadAddon(fitAddon);

      terminal.open(ele);
      terminal.write('Hello from \x1B[1;3;31mxterm.js\x1B[0m $ ');
      fitAddon.fit();
      setWebTerminal(terminal);
    }

    // 初始化ws连接
    if (ws) ws.close();

    const socket = new WebSocket('ws://172.28.57.108:3000');
    socket.onopen = () => {
      socket.send('connect success');
    };

    setWs(socket);
  }, []);

  return <div id="terminal" />;
};

export default WebTerminal;
