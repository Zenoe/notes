* width and height are set to 100% to make the SVG fill its parent container.
 viewBox: define the coordinate system of the SVG
 preserveAspectRatio is set to xMidYMid meet to ensure the SVG scales while preserving its aspect ratio.

 const Diagram = () => {
  const svgRef = useRef();

  useEffect(() => {
    const svg = d3.select(svgRef.current)
      .attr('width', '100%')
      .attr('height', '100%')
      .attr('viewBox', `0 0 ${800} ${600}`)
      .attr('preserveAspectRatio', 'xMidYMid meet')
      .style('background-color', '#f0f0f0');

    const data = [
      { x: 100, y: 100, r: 30 },
      { x: 200, y: 200, r: 20 },
      { x: 300, y: 300, r: 25 },
      { x: 400, y: 400, r: 35 },
    ];

    svg.selectAll('circle')
      .data(data)
      .enter()
      .append('circle')
      .attr('cx', d => d.x)
      .attr('cy', d => d.y)
      .attr('r', d => d.r)
      .attr('fill', 'steelblue');
  }, []);

  return (
    <div style={{ width: '100%', height: '100%', position: 'relative' }}>
      <svg ref={svgRef}></svg>
    </div>
  );
};
* click event handler interfered by drag handler
//on click here would be disturbed by drag event
//the same failure happens with onmouseup
//so implement it in drag-end handler
.on('click', (event, d) => {
        setShapes(prev =>
        prev.map(shape =>
        shape.id === d.id ? { ...shape, selected: !shape.selected } : shape))
})

* ctrl key press prevent drag from working
 the Ctrl key being pressed are filtered out because—under certain circumstances—Ctrl+click should open the context menu instead. The docs on drag.filter() have you covered:
 solve: d3.drag().filter(e => !e.button)

* rect would detatch from mouse when moving quickly
 d3.select(event.sourceEvent.target).attr('x', event.x).attr('y', event.y)
 // event is dom event,not svg element

 // here this is svg, the code has no drag-move-lagging problem
 d3.select(this).attr('x', event.x).attr('y', event.y)

 // or change data, when 'this' is empty, which is most of the cases
const dragging = (event, d) => {
// change data instead
// d3.select(event.sourceEvent.target).attr('x', event.x).attr('y', event.y)
setDatas(prev =>
    prev.map(data =>data.id === d.id ? { ...data, x: event.x, y: event.y } : data))
}

* keydown not trigger on svg or rect
SVG elements (like <svg>) do not naturally receive keyboard events unless they are focused or interactable. By default, only elements like input fields or buttons can receive keyboard events.
solve: add attr:.attr('tabindex', 0)==> makes the SVG focusable and allows it to receive keyboard events.

* contextMenu should put in the dependency list alongside with shapes
such that the latest contestMenu can be read in clearSelection

const clearSelection = e => {
// can't get the latest contextMenu value if contextMenu is not in the dependency list
    if (contextMenu.visible) {
      setContextMenu({visible: false,})
    }
  }
  const handleContextMenu = (event, d) => {
    event.preventDefault()
    setContextMenu({visible: true,})
  }
  useEffect(() => {
    const svg = d3
      .select(svgRef.current)
      .on('click', clearSelection)

  }, [shapes, contextMenu])

* fontawesome icon do not show
add the following CSS
[class^="fa-"]:before, [class*=" fa-"]:before{font-family:fontawesome}

The above CSS will make sure the pseudo :before content, where the FA icons actually live, gets font-family set to fontawesome. With this I can remove 'fa' class. It seems to me that class 'fa' exists only to set the font-family to fontawesome(There are many other CSS rules associated with it, but it seems to me only the font-family matters)

If anyone think this may cause some potential problem, please let me know.

By the way, I test it on font-awesome's official website, and surprisingly, if I remove class 'fa', the icon will reduce to an ugly rectangle. This is kind of uneasy for me, they make class 'fa' mandate for a reason, don't they?

* foreignObject's html assigned by react jsx
// 还没验证行不行
In D3.js, when you use `foreignObject` to include HTML within an SVG, you're dealing with a standard DOM element, not the virtual DOM that React manages. React's JSX is typically rendered by React itself, which manages the DOM updates and efficiently handles changes. However, you can still use React JSX in conjunction with D3's `foreignObject`, but you'll need to render the JSX outside of the usual React rendering flow and then insert the resulting HTML into the D3-managed DOM element.

### Example: Using React JSX with `foreignObject`

Here’s how you can do it:

1. **Create a React Component:**
   Define the JSX that you want to render inside the `foreignObject`.

   ```jsx
   import React from 'react';

   const MyComponent = () => (
     <div style={{ color: 'red', fontSize: '14px' }}>
       <p>This is rendered with React JSX</p>
     </div>
   );

   export default MyComponent;
   ```

2. **Render the React Component to a String:**
   Use ReactDOMServer to render the JSX to a string that D3 can insert into the DOM.

   ```jsx
   import React from 'react';
   import ReactDOMServer from 'react-dom/server';
   import * as d3 from 'd3';
   import MyComponent from './MyComponent';

   // Create your SVG container
   const svg = d3.select('body')
     .append('svg')
     .attr('width', 500)
     .attr('height', 500);

   // Add a foreignObject element
   const foreignObject = svg.append('foreignObject')
     .attr('width', 200)
     .attr('height', 100)
     .attr('x', 50)
     .attr('y', 50);

   // Render the React component to a string
   const htmlString = ReactDOMServer.renderToString(<MyComponent />);

   // Append the rendered HTML to the foreignObject
   foreignObject
     .append('xhtml:div')
     .html(htmlString);
   ```

### Key Points

- **ReactDOMServer:** This module allows you to render a React component to a static HTML string, which you can then insert into the D3 `foreignObject`.

- **SVG Namespaces:** When appending elements inside a `foreignObject`, make sure to use the `xhtml:` namespace to ensure the HTML is correctly interpreted by the browser.

- **DOM Updates:** Since React isn’t managing the DOM in this part, if you need to update the content inside the `foreignObject`, you’ll need to re-render the component using `ReactDOMServer.renderToString` and update the HTML manually.

### Limitations

- **No React State or Lifecycle:** Since the JSX is rendered to a string and manually inserted into the DOM, it doesn’t have access to React’s state, props, or lifecycle methods.

- **Manual DOM Management:** You lose some of the benefits of React's virtual DOM, such as automatic updates when state or props change.

### Alternative Approach

If you need React to manage the `foreignObject` content, you could create a React component that renders the entire SVG, including the `foreignObject`. This way, React would manage the `foreignObject` as part of its virtual DOM, ensuring that updates happen efficiently.

Here's a simplified version:

```jsx
import React from 'react';

const SvgWithForeignObject = () => (
  <svg width="500" height="500">
    <foreignObject x="50" y="50" width="200" height="100">
      <div xmlns="http://www.w3.org/1999/xhtml" style={{ color: 'red', fontSize: '14px' }}>
        <p>This is rendered with React JSX</p>
      </div>
    </foreignObject>
  </svg>
);

export default SvgWithForeignObject;
```

This approach fully integrates React with the SVG and `foreignObject`, allowing you to leverage React's state and lifecycle methods.

* position of edit box on node
v1:
    let inputX = 68 + node.y
    let inputY = 52 + node.x
    let inputWidth = node.data.height
    let inputHeight = 32
    const input = d3
    .select('#modifyNode')
    .style('display', 'block')
    .style('left', `${inputX}px`) // add withd of left div and other paddings
    .style('top', `${inputY}px`)
    .style('height', `${inputHeight}px`)
    .style('width', `${inputWidth}px`)

    but zooming affect the position of edit box, need to consider the cofficient of zoom/pan
v2:
    const transformAttr = selection.attr('transform')
    if (transformAttr) {
      // translate(219.43347100073026,-180.4880118404618) scale(1.5157165665103984)
      const regex = /translate\(([^,]+),\s*([^,]+)\) scale\(([^)]+)\)/
      const match = transformAttr.match(regex)
      if (match) {
        translateX = parseFloat(match[1])
        translateY = parseFloat(match[2])
        scale = parseFloat(match[3])
      }
    }
    inputX = inputX + translateY
    inputY = inputY + translateX
    ...
    but the scale is hard to fixed

v3:
    // get curTransform from zoom event
    if (curTransform) {
      inputX = curTransform.applyX(node.y)
      inputY = curTransform.applyY(node.x)
      inputHeight *= curTransform.k
      inputWidth *= curTransform.k
    }
    ...
    but the y position is not right when zoom

v4: get the node's position relative to viewport, no need magic offset number
    const nodeClientRect = g.select('div.node-text').node().getBoundingClientRect()
    const inputX = nodeClientRect.x
    const inputY = nodeClientRect.y
    const inputWidth = nodeClientRect.width
    const inputHeight = nodeClientRect.height

** get position relative to viewport and body
var rect = d3.select("rect");

var boundingRect = rect.node().getBoundingClientRect();

var x = boundingRect.x; // x position relative to the viewport
var y = boundingRect.y; // y position relative to the viewport
var width = boundingRect.width;
var height = boundingRect.height;

// Get the current scroll position
var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
var scrollTop = window.pageYOffset || document.documentElement.scrollTop;

// Calculate the position relative to the body
var bodyX = boundingRect.x + scrollLeft;
var bodyY = boundingRect.y + scrollTop;

* path
 `diagonal` generates a string representing a path for a diagonal line in an SVG (Scalable Vector Graphics) format. Here's a breakdown of the function:
### Function Definition

```javascript
function diagonal(s: Axis, d: Axis) {
```
- **Parameters**: The function takes two parameters, `s` and `d`, both of which are expected to be objects of type `Axis`. Each `Axis` object presumably has `x` and `y` properties representing coordinates.

### Return Statement

```javascript
return `M ${s.y} ${s.x}
C ${(s.y + d.y) / 2} ${s.x},
${(s.y + d.y) / 2} ${d.x},
${d.y} ${d.x}`;
```

- **Template Literal**: The function uses a template literal (enclosed in backticks) to construct a string that represents an SVG path.

#### Path Commands

1. **Move Command (`M`)**:
   - `M ${s.y} ${s.x}`: This command moves the "pen" to the starting point of the path at coordinates `(s.y, s.x)`. In SVG, the `M` command is used to move to a specific point without drawing anything.

2. **Cubic Bezier Curve Command (`C`)**:
   - `C ${(s.y + d.y) / 2} ${s.x}, ${(s.y + d.y) / 2} ${d.x}, ${d.y} ${d.x}`:
     - This command draws a cubic Bezier curve from the current position to the point `(d.y, d.x)`.
     - The control points for the curve are calculated as follows:
       - The first control point is at `((s.y + d.y) / 2, s.x)`. This point is horizontally centered between the `y` values of `s` and `d`, but vertically aligned with `s.x`.
       - The second control point is at `((s.y + d.y) / 2, d.x)`, which is also horizontally centered between the `y` values but vertically aligned with `d.x`.

### Summary

- **Purpose**: The function creates an SVG path string that represents a diagonal line with a smooth curve between two points defined by the `s` and `d` objects.
- **Use Case**: This is often used in data visualization libraries (like D3.js) to create curved lines between points in a graph or chart.

If you have any specific questions about parts of the code or its application, feel free to ask!


* pointer-events-none cursor-wait  can't coexist
pointer-events-none disables all pointer events, including cursor changes.
* svg {
  user-select: none; /*disable text selection inside the SVG, preventing the browser from selecting text on double-click*/
}
* add more shapes base of property of data
    const nodeEnter = node
      .enter()
      .append('foreignObject')
      .attr('class', 'mindmap-node')
      .attr('width', node => node.data.width + 4)
      .attr('height', node => node.data.height)
      .attr(
        'transform',
        d => `translate(${source.y0}, ${source.x0 - d.data.height / 2})`
      )
    node
      .enter()
      .filter(d => d.data.state === 'new')
      .append('rect')
      .attr('width', d => d.data.width)
      .attr('height', d => d.data.height)
      .attr('x', d => d.x)
      .attr('y', d => d.y)


* tree layout
d3.hierarchy converts the raw data into a hierarchical structure that D3 can work with, this structure includes both data and children properties
the data prop and the children within it contins the original raw data, while the children are created by d3

when updating data for tree, the raw part of the structure are needed to be dealt with
* this is undefined in arrow function

* nested append first g and then others
const nodeGroup = svgGroup.selectAll('g.node').data(treeNodes, d => d.data._id);
const nodeEnterG = nodeGroup.enter()
  .append('g')
  .attr('class', 'node');

const nodeEnter = nodeEnterG
  .append('foreignObject')
  .attr('class', 'mindmap-node')
  .attr('width', node => node.data.width + 4)
  .attr('height', node => node.data.height)
  .html(node => node.data.html);

  // update selection
nodeGroup.select('foreignObject.mindmap-node')
  .attr('width', node => node.data.width + 4)
  .attr('height', node => node.data.height)
  .html(node => node.data.html);

  // merge enter and update
  const nodeUpdate = nodeEnterG.merge(nodeGroup);

nodeUpdate.select('foreignObject.mindmap-node')
  .attr('width', node => node.data.width + 4)
  .attr('height', node => node.data.height)
  .html(node => node.data.html);

  nodeGroup.exit().remove();

** why this code doesn't work (without further selection of 'foreignObject.mindmap-node'):
  const nodeUpdate = nodeEnterG.merge(nodeGroup);
nodeUpdate
  .attr('width', node => node.data.width + 4)
  .attr('height', node => node.data.height)
  .html(node => node.data.html);
  -->The reason the code doesn't work when you directly apply the .attr and .html methods to nodeUpdate without further selecting 'foreignObject.mindmap-node' is that nodeUpdate refers to a group (<g>) element, not the <foreignObject> within it. The methods .attr() and .html() will try to apply the attributes and HTML content to the <g> elements instead of the <foreignObject> elements.

** how about this merge: const nodeUpdate = nodeEnter.merge(nodeEnterG)
nodeEnterG: This is the selection of newly created <g> elements (the "enter" selection).
nodeEnter: This is the selection of the newly created <foreignObject> elements that were appended to the <g> elements (nodeEnterG).
These two selections represent different elements in the DOM hierarchy. Specifically:

nodeEnterG is a selection of <g> elements.
nodeEnter is a selection of <foreignObject> elements inside those <g> elements.
Why nodeEnter.merge(nodeEnterG) Doesn’t Work:
merge() is used to combine two selections of the same type of element. Both selections should be targeting the same kind of elements, such as two sets of <g> elements or two sets of <foreignObject> elements.
In this case, nodeEnter and nodeEnterG are different types of elements (foreignObject vs. g). Merging them does not make sense, as they don’t represent the same elements or fulfill the same role in the DOM structure.

* custom separation for tree layout
 ask gpt step by step
** first ask To solve the issue of overlapping or crossing branches in a horizontal D3 tree layout,
** new problem occur: ome nodes' links are slanting backward to connect their children
** ask in the right way: to gpt make sure the start coordinate of each node larger than the start of its parent node plus its length
make sure each child node starts at a coordinate larger than its parent node's end (start position + width of the node)
* nodeSize cause the root node's coordinates (x and y) default to (0, 0)
// recenter tree manually
const offsetX = svgWidth / 2;
const offsetY = svgHeight / 2;
// Apply the dynamic translation
root.forEach(node => {
  node.x += offsetX;
  node.y += offsetY;

  // if horizontally place the tree
  // node.y += offsetX;
  // node.x += offsetY;
});

* when dragging a node move over another node, some of them trigger mouseover, but some are not.
pointer-events: Make sure that the dragged node does not prevent mouse events from being detected on other elements
One way to handle this is to temporarily set pointer-events to none for the dragged node during the drag operation:

  const dragStart = function (event, d) {
    d3.select(this)
      .select('foreignObject')
      .classed('dragging', true)
      .style('pointer-events', 'none')
  }

* Transformation on <g> Group: not on its child foreignObject
Applying a transformation (like translate, rotate, or scale) to a <g> (group) element affects all of its child elements, including <foreignObject>, <rect>, <text>, etc.
The transformation is relative to the group's own coordinate system. Any child element within the group inherits the transformation applied to the group.
Transformation on <foreignObject>:
    d.x0 += event.dy
    d.y0 += event.dx
    const node = d3.select(this)
    node.attr('transform', `translate(${d.y0}, ${d.x0})`)

Applying a transformation to a <foreignObject> element only affects that specific element, not the parent <g> or any of its siblings.
The transformation is applied relative to the <foreignObject>'s own coordinate system, which is nested within its parent group's coordinate system.
this is not good, on start draggin, the element flies to nowhere to be found

* add a class to stop to show when dragging
  &:hover {
    .node-body {
      .options {
        display: flex;
      }
    }
  }
  &.dragging {
    .node-body {
      .options {
        display: none !important;
      }
    }
  }

* insert instead of appen
selection.insert(name[, before])
name: The name of the element to be inserted (e.g., "path").
before: A selector string that specifies the element before which the new element should be inserted. If omitted, the new element is appended to the end of the selection.

* select inside foreignObject
const foreignObj = nodeUpdate
  .select('foreignObject.mindmap-node')
  .html(node => node.data.html)
  .select('.node-body .node-text') // select the .node-text element inside .node-body.
  .on('click', (e, clickedNode) => {
  });

** <foreignObject class="mindmap-node">
  <div class="node-body">
    <div class="options">
      <div class="option remove-item"><i class="fas fa-trash-alt"></i></div>
    </div>
    <div class="node-text" style="border: none;">fd</div>
  </div></foreignObject>

* mouseout --> mouseleave
registering listening mouseout on the parent of foreignObject and circle, the group, when I move mouse from foreighObject to circle, mouseout event fired

 by default, the mouseout event does not differentiate between moving out of a parent element (group) versus moving between its child elements (foreignObject and circle). When you move from foreignObject to circle, the mouse is technically leaving the child foreignObject, causing the mouseout event to fire on the parent group.

 1. Use mouseleave Instead of mouseout
    mouseleave event is similar to mouseout but does not trigger when moving between child elements. It only triggers when the mouse leaves the target element itself.
 2. Use mouseout with Additional Logic
    d3.select('your-group-selector')
  .on('mouseout', function (event) {
    const e = event.toElement || event.relatedTarget;

    // Check if the new target is still within the parent group
    if (this.contains(e)) {
      // Mouse is still within the group, ignore the event
      return;
    }

    // Mouse truly left the group, handle the event
  });
* append extra class to existing selection
1. Overwriting Existing Classes when applying attr('class',...)
2. .classed for adding/removing classes
function selectNode(event, node) {
  d3.select(event.target).classed('selected', true)
  // equivalent to
  d3.select(event.target).attr('class', 'node-text selected')
}
* selectAll
d3.selectAll('.node-body .node-text, .node-body .node-text.selected')
  .each(function() {
    const element = d3.select(this);
    if (element.classed('selected')) {
      // Apply styles for elements with the 'selected' class
      element.style('background-color', '#4D8B7A')
             .style('border', '1px solid #444')
             .style('color', '#FFFFFF');
    } else {
      // Apply styles for elements without the 'selected' class
      element.style('background-color', '#FFFFFF')
             .style('color', 'black');
    }
  });

d3.select(): Only selects the first element in the DOM that matches the given selector
d3.selectAll(): Selects all elements in the DOM that match any of the provided selectors. It can handle multiple selectors separated by a comma.
selectAll by itself selects elements based on a CSS selector and does not know about any associated data. If the elements selected do not have data bound to them (via data()), d will be undefined.

* focus and select not work
const inputDom = sslectContainer.select('input').node()
inputDom.focus()
inputDom.select()
// It's not that .select() failed; rather, a subsequent action(setInputValue invoke by react effect) destroyed the selection state.
// it's not that .select() failed, it's that the afterwards action destroy the select state

* d3 in react, react in d3, dynamically mount react comp in d3'app
nodeOptions is fetched from backend. but SearchableSelect can't get the updated value as soon as
data arrived from backend. only by navigating to and back, can the data be updated in SearchableSelect
    const sslectContainer = d3
      .select(svgRef.current.parentElement)
      .append('div')
      .style...
      .node()

    if (!sslectRoot) sslectRoot = ReactDOM.createRoot(sslectContainer)
    sslectRoot.render(
      <SearchableSelect
        options={nodeOptions}
        onSelect={value => sslectModifyNodeListener(value, node, selection)}
      />
    )

function sslectModifyNodeListener(value, node, selection) {
    if (!node) return
    sslectRoot.unmount()
    sslectRoot = null
    d3.select('#sslectContainer').remove()

* d3 draging event, event.x y vs d3.pointer(event, svg).x, y
relate to container vs relate to browser viewport

* the last appended svg elements stays on the top
Changing the order of the code that appends elements to the DOM does not always guarantee the desired stacking order in D3.js. In SVG, elements are rendered in the order they appear in the DOM
To ensure that the circles appear above the paths, you need to explicitly manipulate the DOM order.

Use selection.raise() or selection.lower() to change the stacking order of elements after they have been appended to the DOM
circles.merge(circleEnterG).raise()

* update, exit in each
To ensure the each function is applied to both new and existing elements, you should use it after merging the enter and update selections. This way, the each function will iterate over all the <g> elements, not just the newly entered ones.
tempRectsMerged.each(function (d) {
  const group = d3.select(this);
  Object.values(rectHandles(group, d)).forEach(handle =>
    handle.style('display', 'block')
  );
});

const tempRectsExit = tempRects.exit();
// Remove the exiting elements
tempRectsExit.each(function () {
  const group = d3.select(this);
  group.selectAll('.handle').remove()
  // Apply any additional cleanup if necessary
})
  .remove();

* d3 v6, not v3, after register drag , the mouseup cann't be invoked
handle mouseup in drag.end
* coordinate
** drag event coordinate
drag start event on ellipse, the x,y is (40,0). 这个是正确的
    <g>
      <g class="rect-node" stroke-width="1" transform="translate(429, 364)">
        <rect fill="transparent" stroke="gray" width="80" height="40"></rect>
        <g class="mouseoverG">
          <ellipse cx="40" cy="0" rx="8" ry="8"></ellipse>
          <ellipse cx="40" cy="80" rx="8" ry="8"></ellipse>
        </g>
      </g>
    </g>


function dragStart(event, d) {
  const startPoint = { x: event.x, y: event.y }
  // event.x,y = d.x,y
  // 选错了祖先，导致d.line 添加到了意外的位置, 误以为是event.x,y 的问题
  // const svgGDom = this.parentNode.parentNode.parentNode
  const svgGDom = this.parentNode.parentNode
  d.selection = d3.select(svgGDom)

  d.line = d.selection
    .append('path')
    .attr(
      'd',
      `M ${startPoint.x},${startPoint.y} L ${startPoint.x},${startPoint.y}`
    )
    .attr('marker-end', 'url(#arrow)')
}
** drag start event.x,y
// 直接添加mouseoverG,  相当于和rect-node group 绑定同一个数据, drag start event.x,y 等同于rect-node group 的坐标，也就是translate的429，364
    g.append('ellipse')
      .attr('cx', 80).attr('cy', 20).attr('rx', 8).attr('ry', 8).attr('fill', '#00ff00')
      .call(d3 .drag()
          .on('start', dragConnectionStart))
// 如果为其绑定独立的数据，那么drag start event.x,y 是局部坐标(40,0),或者(40,80)
    const dj = g.selectAll('connection-point').data(points)
    const enter = dj
      .enter()
      .append('ellipse')
      .attr('class', 'connection-point')
      .attr('cx', d => d.x).attr('cy', d => d.y).attr('rx', 8).attr('ry', 8)
      .attr('fill', '#00ff00')
      .style('cursor', d => {
        if (!dragStartNode) return 'default'
        else return 'crosshair'
      })
      .call(d3.drag().on('start', dragConnectionStart))

** coordinate in circle in g
g.append('circle').translate(x,x)
the coordiante of the center of the circle is (x,y), local is (0,0)
* not smooth ellipse'edge
1. **Ensure the `viewBox` is set appropriately**: If the viewBox is too small or not set, it can cause rendering issues. Ensure your SVG has a proper `viewBox` that accommodates the ellipse fully.

   ```html
   <svg viewBox="0 0 100 50" xmlns="http://www.w3.org/2000/svg">
     <ellipse cx="32" cy="20" rx="32" ry="20" fill="none" stroke="gray" strokeWidth="1" />
   </svg>
   ```

2. **Use `shape-rendering="geometricPrecision"`**: This SVG property makes the rendering engine prioritize precision over performance, making edges and curves smoother.

   ```html
   <ellipse
     cx="32"
     cy="20"
     rx="32"
     ry="20"
     fill="none"
     stroke="gray"
     strokeWidth="1"
     shape-rendering="geometricPrecision"
   />
   ```

3. **Increase resolution or adjust scale**: If your ellipse appears jagged due to low resolution, increasing the size of the `viewBox` or rendering at a larger scale could help.

* selectAll('.connection-point') 选择类要加点
    const dj = g.selectAll('.connection-point')
                 .data(points, d => d.id)
    const enter = dj
      .enter()
      .append('ellipse')
      .attr('class', 'connection-point')
      .attr('cx', d => d.x)
      .attr('cy', d => d.y)
      .attr('rx', 8)
      .attr('ry', 8)
      .attr('stroke', '#00ff00')
      .call(
        d3.drag()
          .on('start', dragConnectionStart)
          .on('drag', draggingConnection)
          .on('end', dragConnectionEnd)
      )
    // update
    dj.attr('cx', d => d.x).attr('cy', d => d.y)
    dj.exit().remove()

* dragging a path line over another rect, the rect's on mousemove won't be triggered
but mouseenter of other rect can be trigger
so how to calculate the closest point to the dragging line's head
to do the calculation in dragging function
  function draggingConnection(event, d) {
    const pathData = calculateOrthogonalPath(
      d.selection,
      d.ref,
      {
        x: event.x + d.ref.x,
        y: event.y + d.ref.y,
        width: 0,
        height: 0,
      },
      d.pos
    )
    dragStartedEllipse.ex = event.x
    dragStartedEllipse.ey = event.y
    d.line.attr('d', pathData).classed('diagram-link', true)
    debounceFn(
      appendClosestSnapEllipse(mouseEnterNode, dragStartedEllipse),
      100
    )
  }

* g.selectAll('circle').remove() vs gEnter.selectAll('circle').remove()
  const updateTempRect = (flag = false) => {
    const tempRects = svgG.current
      .selectAll('g.temp-rect')
      .data(tempRectShape, d => d.id)
    const tempRectsEnterG = tempRects
      .enter()
      .append('g')
      .attr('class', 'temp-rect')
    tempRectsEnterG.append('rect')
    const resizeG = tempRectsEnterG
      .append('g')
      .selectAll('circle')
      .data([{ref: tempRectShape[0],}])
      .enter()   // move here
    resizeG
      // .enter() // moved
      .append('circle')
      .attr('cx', 0)
      .attr('cy', d => d.ref.height / 2)
      .attr('r', 5)
      .call(
        d3.drag().on('drag', function (event, d) {
          resizeG.selectAll('circle').remove() // not work, here resizeG is just data join, must change to enter selection by calling enter()
          const rect = d.ref.ref
          rect.x += event.x
          rect.width -= event.x
          rect.width = Math.max(rect.width, 10)
          //
          d.ref.x = rect.x
          d.ref.width = rect.width
          updateGraph()
        })
      )

    const tempRectsMerged = tempRectsEnterG.merge(tempRects)

    tempRectsMerged
      .attr('transform', d => `translate(${d.x}, ${d.y})`)
      .select('rect')
      .attr('width', d => d.width)
      .attr('height', d => d.height)

     tempRects.exit().remove()
  }

* pointer-events property and set it to stroke. This will make only the stroke clickable (not the fill).
fill="transparent". This way, even the gaps between the dashes will register as clickable.

* select class a b
d3.selectAll(".a.b") // a and b
d3.selectAll(".a, .b") // a or b

* define and append edgeG and then shapeG to keep shapes stay above edges

* click event coordinate
When clicking on the `rect` inside your structure, the values of `event.x` and `event.y` in D3.js relate to the mouse coordinates relative to the **viewport**, not directly to the SVG elements or their transformations.

1. The `div` contains the `svg`.
2. The `svg` contains a group (`g`) with a `translate(0,0)`.
3. Inside this group (`g`), there's another group (`shapeG`) without translation.
4. Inside `shapeG`, there's another `g` that is translated by `(100, 100)`.
5. Inside this translated `g`, you have a `rect`.

Now, when clicking the `rect`:
- `event.x` and `event.y` give the mouse coordinates relative to the **viewport** or **document** (typically the top-left corner of the browser window).

To get the coordinates relative to the SVG elements (considering all the transformations):
- You need to account for all transformations (`g` with `translate(100,100)`, parent `g` translations, etc.).
- You can use D3’s `d3.pointer` or `getScreenCTM` (Coordinate Transformation Matrix) to convert the global `event.x` and `event.y` to coordinates relative to a specific element.

For example:
```js
const [x, y] = d3.pointer(event, svg.node());
```
This gives you the coordinates of the click relative to the SVG, considering all transformations in the hierarchy.

Let me know if you'd like further details on handling these transformations!
