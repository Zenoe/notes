* onClick={() => toggleOpen(e => !e)} vs onClick={toggleOpen(e => !e)}
onClick={toggleOpen(e => !e)}: This is incorrect because it immediately invokes toggleOpen during the render phase rather than on the click event.
It would result in an error unless toggleOpen returns a function that matches the expected onClick callback signature.

* maintain state across page refreshing
When you refresh the page, the state of your React application is reset, including the active menu item in Ant Design's Menu component. To maintain the active menu item state across page refreshes, you need to persist the state somewhere that is not affected by the page reloading, such as the URL or localStorage.

Here's a common pattern using React Router and URL parameters to keep track of the active menu item:

Use React Router to handle navigation in your application.
Update the URL path or query parameters when a menu item is clicked.
On component mount (or update), read the URL to determine which menu item should be active.

  const location = useLocation();
  const [current, setCurrent] = useState('A');

  useEffect(() => {
    // Set the active item based on the current URL path
    const path = location.pathname;
    if (path.includes('/b')) {
      setCurrent('B');
    } else {
      setCurrent('A');
    }
  }, [location]);

* useReducer: an alternative to `useState` when you have complex state logic that involves multiple sub-values or when the next state depends on the previous state.

* useEffect: allows you to perform side effects in your functional components. Side effects can include fetching data from an API, subscribing to events, manipulating the DOM, or any other asynchronous or non-reactive tasks.

* useRef
similar to an instance var in a class component
the value in useRef persisites across component re-renders, normal variable get reset on each render
inputRef.current is the DOM element

the changes of `useRef` referenced DOM elements or values don't trigger re-renders
not suitable for managing state that needs to be reflected in the UI.

由于闭包的特性，普通变量在事件处理函数中可能会捕获旧的值，而不是最新的值。这会导致一些不可预期的行为。使用 useRef 可以避免这种情况，因为 useRef 的 .current 属性始终指向最新的值。
使用 useRef 可以确保我们能够在 useEffect 的清理函数中访问到最新的定时器引用
`useRef` can also be used to store previous values or to persist values across different renders of a component

* useSelector vs connect
Whether to use `connect` or `useSelector` depends on whether you are using class components or functional components with hooks.

1. **`connect`**: If you are using class components or prefer the traditional higher-order component (HOC) approach, you can use the `connect` function provided by `react-redux`. It allows you to connect your components to the Redux store and access state and dispatch functions.

   Here's an example of using `connect`:

   ```javascript
   import React from 'react';
   import { connect } from 'react-redux';

   class MyComponent extends React.Component {
     // ...
   }

   const mapStateToProps = (state) => {
     return {
       // map state properties to component props
     };
   };

   const mapDispatchToProps = (dispatch) => {
     return {
       // map dispatch functions to component props
     };
   };

   export default connect(mapStateToProps, mapDispatchToProps)(MyComponent);
   ```

   In this example, `mapStateToProps` and `mapDispatchToProps` are functions that define how to map the Redux state and dispatch functions to the component's props. The `connect` function wraps the component and connects it to the Redux store.

2. **`useSelector`**: If you are using functional components and prefer the hook-based approach, you can use the `useSelector` hook provided by `react-redux`. It allows you to select specific state values from the Redux store.

   Here's an example of using `useSelector`:

   ```javascript
   import React from 'react';
   import { useSelector } from 'react-redux';

   function MyComponent() {
     const someValue = useSelector((state) => state.someValue);

     // ...
   }

   export default MyComponent;
   ```

   In this example, `useSelector` is used within the functional component to select the `someValue` property from the Redux store. The selected value is assigned to the `someValue` variable.

Overall, if you are starting a new project or working with functional components and hooks, using `useSelector` is recommended as it is more concise and aligns with modern React practices. However, if you are working with class components or have an existing project using the traditional HOC approach, you can continue using `connect`.

* createSlice
In Redux Toolkit, the `createSlice` function is a utility that helps simplify the process of creating Redux reducers and actions by combining them into a single "slice" of the Redux store.

Here's an example of how to use `createSlice` to define a slice of the Redux store:

```javascript
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  // initial state properties
};

const mySlice = createSlice({
  name: 'mySlice',
  initialState,
  reducers: {
    increment(state) {
      state.count += 1;
    },
    decrement(state) {
      state.count -= 1;
    },
    // other reducer functions
  },
});

export const { increment, decrement } = mySlice.actions;
export default mySlice.reducer;
```

In the example above, we import `createSlice` from `@reduxjs/toolkit` and define an initial state object.

We then call `createSlice` and pass an object with the following properties:

- `name`: A string name for the slice. This is used to generate action types based on the slice name.

- `initialState`: The initial state object for the slice.

- `reducers`: An object that defines the reducer functions for the slice. Each key-value pair represents an action type and its associated reducer function. Inside each reducer function, you can modify the state using mutable syntax.

The `createSlice` function automatically generates the action creators based on the reducer function names. In the example, we export the `increment` and `decrement` action creators using destructuring syntax.

Finally, we export the generated reducer function from `createSlice` as the default export.

To use this slice in your Redux store, you can combine it with other slices using the `combineReducers` function from Redux.

```javascript
import { combineReducers, configureStore } from '@reduxjs/toolkit';
import mySliceReducer from './mySlice';

const rootReducer = combineReducers({
  mySlice: mySliceReducer,
  // other reducers
});

const store = configureStore({
  reducer: rootReducer,
  // other configuration options
});

export default store;
```

In this example, we define a root reducer using `combineReducers`, which combines multiple slice reducers, including `mySliceReducer`. We then pass the root reducer to the `configureStore` function to create the Redux store.

Note that `createSlice` is part of the `@reduxjs/toolkit` package, which provides additional utilities and conventions to simplify Redux development.

* why reducers in createSlice do not return a new state object
In Redux Toolkit's `createSlice` function, the reducers defined within the slice do not need to return a new state object explicitly. Instead, they use a concept called "mutating" the state.

When using `createSlice`, you can write reducer functions using mutable syntax to update the state directly. Under the hood, Redux Toolkit uses the `immer` library, which allows you to write "mutating" code that is translated into immutable updates.

In the example above, the `increment` and `decrement` reducer functions directly modify the `count` property of the `state` object using mutable syntax. Redux Toolkit's `createSlice` takes care of producing an updated state object behind the scenes.

By using mutable syntax, it becomes easier to write reducer logic without explicitly creating new state objects. Redux Toolkit's `createSlice` leverages `immer` to handle the immutability aspect, ensuring that a new state object is created internally.

This approach provides a more concise and intuitive way to define reducers, as you can focus on the logic of updating the state directly, rather than creating new objects manually.

It's important to note that even though the code appears to be mutating the state, Redux Toolkit ensures that the state updates are actually performed immutably. Under the hood, `immer` creates a new copy of the state with the necessary changes applied, while keeping the rest of the state unchanged.

This abstraction provided by Redux Toolkit and `immer` simplifies the development process by allowing you to write reducers in a more intuitive and mutable style, without compromising the immutability guarantees that Redux provides.

* combineReducers
`combineReducers` is a Redux function that allows you to combine multiple reducers into a single root reducer. It helps manage different parts of the application state by delegating the handling of specific slices of the state to individual reducers.

```javascript
import { combineReducers } from 'redux';

// Import your individual reducers
import todosReducer from './todosReducer';
import userReducer from './userReducer';

// Combine the individual reducers into a root reducer
const rootReducer = combineReducers({
  todos: todosReducer,
  user: userReducer,
});

export default rootReducer;
```

In this example, we have two separate reducer functions: `todosReducer` and `userReducer`. Each reducer handles a specific slice of the application state: `todos` and `user`, respectively.

To combine these reducers, we use the `combineReducers` function from Redux. By passing an object with key-value pairs, we specify how each individual reducer should handle its corresponding slice of the state.

The resulting `rootReducer` is a function that manages the entire application state. When an action is dispatched, the `rootReducer` delegates the action to the appropriate individual reducer based on the key-value pairs provided to `combineReducers`.

The `rootReducer` will create a new state object by calling each individual reducer with the current state slice and the dispatched action. Each reducer will handle its specific slice of the state and return the updated state slice.

Once the individual reducers have processed the action, `combineReducers` combines all the updated state slices into a single state object.

To use the `rootReducer`, you typically pass it to the Redux `createStore` function when setting up your Redux store:

```javascript
import { createStore } from 'redux';
import rootReducer from './reducers';

const store = createStore(rootReducer);
```

By combining reducers with `combineReducers`, you can modularize your Redux state management, making it easier to maintain and update different parts of the state separately. Each individual reducer can focus on handling a specific slice of the state, improving code organization and maintainability.

In `combineReducers`, the keys represent the names of the slices of the state that each individual reducer will manage. These keys are important for organizing and accessing different parts of the state within the Redux store.

In this example, we have two individual reducers: `todosReducer` and `userReducer`. By using `combineReducers`, we combine these reducers into a single `rootReducer` that manages the entire application state.

The keys in the object passed to `combineReducers` (`todos` and `user`) determine how the state is organized within the Redux store. Each key represents a specific slice of the state that the corresponding reducer will handle.

For example, the `todosReducer` will handle the state slice under the `todos` key, and the `userReducer` will handle the state slice under the `user` key.

When the `rootReducer` is called, it delegates the management of each state slice to the appropriate individual reducer based on these keys. Each reducer will handle its specific slice of the state and return the updated state slice.

The resulting state object in the Redux store will have the same keys as those specified in `combineReducers`, corresponding to the state slices managed by each individual reducer.

Here's an example of how the state might look in the Redux store based on the `rootReducer` above:

```javascript
{
  todos: {...}, // State managed by todosReducer
  user: {...}, // State managed by userReducer
}
```

By using keys in `combineReducers`, you can easily access and update specific slices of the state within your Redux store, providing a clear and organized structure for managing complex application states.

* dispatch
`dispatch` is a function provided by Redux that allows you to dispatch actions to trigger state updates in the Redux store. It is a fundamental method for interacting with the Redux state management system.

Here's an example of how to use `dispatch`:

```javascript
import { createStore } from 'redux';

// Create a Redux store
const store = createStore(reducer);

// Dispatch an action
store.dispatch({ type: 'INCREMENT' });
```

In this example, we first create a Redux store using the `createStore` function from Redux. The `reducer` argument represents the root reducer that manages the application state.

Once the store is created, we can use the `dispatch` method of the store to dispatch actions. An action is a plain JavaScript object that describes an intention to change the state. It typically has a `type` property that specifies the type of action being dispatched, along with any additional data that is necessary to perform the state update.

In the example above, we dispatch an action object with a `type` property set to `'INCREMENT'`. This action can be used to trigger a specific logic inside the reducer to update the state accordingly.

When `dispatch` is called, Redux handles the process of calling the reducer function with the current state and the action object. The reducer then determines how the state should be updated based on the action type and returns a new state object.

The dispatched action will flow through the reducers defined in the root reducer, allowing each individual reducer to handle the specific action types it is responsible for.

It's important to note that dispatching an action does not immediately update the state. The reducer logic is executed synchronously, and the state update occurs as a result of the reducer returning a new state object. Subscribers to the Redux store, such as UI components, can listen for state changes and react accordingly.

By using `dispatch`, you can trigger actions that initiate state updates in the Redux store, allowing you to manage and synchronize application state changes in a predictable and centralized manner.

* createStore vs confiureStore
`createStore` and `configureStore` are both functions provided by Redux, but they serve slightly different purposes.

`createStore` is a core function in Redux that is used to create a Redux store. It takes in a root reducer and an optional initial state and returns a Redux store object.

Here's an example of how to use `createStore`:

```javascript
import { createStore } from 'redux';
import rootReducer from './reducers';

const store = createStore(rootReducer, initialState);
```

In this example, `createStore` is used to create a Redux store with `rootReducer` as the root reducer. The `initialState` argument is optional and represents the initial state of the application.

`configureStore`, on the other hand, is a utility function provided by Redux Toolkit. It is used to create a Redux store with additional configurations and middleware included.

Here's an example of how to use `configureStore`:

```javascript
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './reducers';

const store = configureStore({
  reducer: rootReducer,
  middleware: [],
});
```

In this example, `configureStore` is used to create a Redux store with `rootReducer` as the root reducer. The `middleware` option is an array where you can include middleware functions, such as Redux Thunk or Redux Saga, to enhance the store's capabilities.

`configureStore` also provides other options like `devTools`, `preloadedState`, and `enhancers` that allow you to customize the store configuration further.

Additionally, `configureStore` automatically sets up some default behavior for the Redux store, such as enabling Redux DevTools Extension integration, enabling serializable state checks, and enabling strict mode.

In summary, while `createStore` is the basic function to create a Redux store, `configureStore` is a more opinionated and convenient function provided by Redux Toolkit that includes additional configurations and defaults. It simplifies the process of setting up a Redux store with common configurations and middleware, making it easier to work with Redux.

* thunk
using configureStore from Redux Toolkit, do not need to separately install or configure Redux Thunk middleware. configureStore automatically includes Redux Thunk as part of its default middleware setup.
You can directly dispatch actions that are asynchronous functions

By using Redux Thunk and the `fetchPosts` action, this component can handle the asynchronous API request and display the appropriate UI based on the loading and error states. It abstracts away the implementation details of the async logic, making the component more focused on rendering the UI based on the data in the Redux store.

Remember to connect the component to the Redux store using the `connect` function or wrap it with a `Provider` component to make the Redux store available to the component and its child components.

** createStore way
1. npm install redux-thunk

2. Apply Redux Thunk middleware to your Redux store:
```javascript
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import rootReducer from './reducers';

const store = createStore(rootReducer, applyMiddleware(thunk));
```

In this example, we import `thunk` from the `redux-thunk` package and apply it as middleware using `applyMiddleware` when creating the Redux store.

const fetchUser = (userId) => {
  return (dispatch) => {
    dispatch({ type: 'FETCH_USER_REQUEST' });
    // Simulated asynchronous operation
    setTimeout(() => {
      const user = { id: userId, name: 'John Doe' };
      dispatch({ type: 'FETCH_USER_SUCCESS', payload: user });
    }, 2000);
  };
};

**Example 2: Delayed Dispatch**
**Example 3: Conditional Dispatch**

1. **Simplifies Asynchronous Logic**: Redux Thunk allows you to write asynchronous logic in a more straightforward manner compared to manually managing promises or callbacks. It abstracts away the complexity of handling async operations and provides a clear structure for dispatching actions at different stages.

2. **Centralized Control**: With Redux Thunk, you can centralize the handling of asynchronous operations within your Redux actions. This improves code organization and makes it easier to understand and maintain the flow of async logic.

3. **Integration with Redux Ecosystem**: Redux Thunk seamlessly integrates with the existing Redux ecosystem, including tools like Redux DevTools and Redux Toolkit. It also works well with other middleware and can be combined with other Redux middleware, such as Redux Saga or Redux Observable, to handle more complex async scenarios.

4. **Flexibility**: Redux Thunk allows you to perform any kind of async operation within a thunk action, such as API requests, delays, or conditional logic. It provides the flexibility to handle a wide range of async scenarios without being tied to a specific approach or library.

* useMemo
when extracting value from props involve a lot of caculation
When it comes to modifying props or derived values based on props, it's typically done directly in the component function body(not in useEffect)
used to memoize a value so that it is only recomputed when its dependencies change. It is useful when you have a costly computation or a complex data transformation that you want to compute once and cache the result for subsequent renders.
const PostList = () => {
  const dispatch = useDispatch();
  const posts = useSelector(state => state.posts);
  const loading = useSelector(state => state.loading);
  const error = useSelector(state => state.error);

  const formattedPosts = useMemo(() => {
    return posts.map(post => ({
      id: post.id,
      title: post.title.toUpperCase(),
      body: post.body.trim()
    }));
  }, [posts]);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (<div>... </div>);
};

* css modules
if css is compiled with css-loader's moduel set true(which appears in webpack config), we can't not ref the class in the way in className='xxx'
unless in css files,the class is defined as:
:global .xxx{...}

** example:
{
  loader: 'css-loader',
  options: {
    modules: true
  }
}
If you don't want this behaviour to be default, in your (s)css you can use:

// sCSS
:local .yourClass {...}

// JS

import cls from '../yourCss.scss'

const Component = () => (
  <div className={cls.yourClass} />
)

// yourClass will become some random hash
// or something else based on your css loader config
to have it processed. If you have modules: true and you don't want css loader to compile your class, you can use

// CSS
:global .yourGlobalClass {...}

// JS
import '../yourCss.scss'

const Component = () => (
  <div className="yourGlobalClass" />
)
See the documentation: https://github.com/webpack-contrib/css-loader and https://github.com/css-modules/css-modules

* create selector
export const selectListItems = createSelector([selectCrud], (crud) => crud.list);
- `[selectCrud]`: an array containing a single input selector, is used to select the `crud` slice of the Redux state.
- `(crud) => crud.list`: the transformation function that receives the values selected by the input selectors as arguments. In this case, it receives the `crud` slice of the state. The transformation function simply returns the `crud.list` property, which is the desired value derived from the state.
By using `createSelector`, the `selectListItems` selector will only recompute its value if the input selector (`selectCrud`) result changes

* navigate vs Link
0. use Link can avoid making onClick function
  const handleMenuClick = e => {
    if (e.key === 'logout') {
      navigate('/logout')
    } else if (e.key === 'login') {
      navigate('/login')
    }
    setVisible(false)
  }

  const menu = (
    <Menu onClick={handleMenuClick}>
      {authSuccess && <Menu.Item key="logout">Logout</Menu.Item>}
      {!authSuccess && <Menu.Item key="login">Login</Menu.Item>}
    </Menu>
  )

1. `Link` component:
It is similar to the `<a>` tag in HTML, but it integrates with React Router to provide client-side navigation without refreshing the page.

import { Link } from 'react-router-dom';
const Navigation = () => {
  return (
    <nav>
      <ul>
        <li>
          <Link to="/">Home</Link>
        </li>
        <li>
          <Link to="/about">About</Link>
        </li>
      </ul>
    </nav>
  );
};

When the link is clicked, React Router handles the navigation and updates the URL without refreshing the page.

2. `useNavigate` hook:
The `useNavigate` hook is used to programmatically navigate to different routes in a React component. It provides a function that you can call to navigate without using a `Link` component.

* local vs state
Defining modifiedObject in the function body is suitable for simple scenarios where the derived value is recalculated on each render.
Using useState to define modifiedObject as a state variable is more appropriate when the derived value needs to persist and be updated based on prop changes over time.
* When a page is refreshed or when you navigate away from a page and then come back
the state of a React component is typically reset to its initial values. This is because React components are unmounted and remounted when the page is refreshed or when you navigate away and return.

In the context of a single page application (SPA) where the page does not fully reload but navigates between different views or components, the state of a component can be preserved as long as the component itself is not unmounted.

If you need to persist state across page refreshes or between different views in a SPA, you can consider using techniques like browser storage (such as localStorage or sessionStorage) or server-side storage (like a database) to store and retrieve the state data.

Here's a brief summary:

Page Refresh: When a page is refreshed, the state of a React component is typically reset to its initial values.

Navigation in a SPA: In a single page application (SPA), components can maintain their state as long as they are not unmounted. Navigating between views within the same SPA typically does not cause the state to be reset.

State Persistence: To persist state across page refreshes or between different views, you can use browser storage (localStorage, sessionStorage) or server-side storage to store and retrieve the state data.

* infinite loop in useEffect
export default function DataTable({ someprop=[] }) {
  const [s, sets] = useState(selectedKeys)
  useEffect(() => {

    let newvalue
    // calcute newvalue
    // sets cause component to update and trigger the useEffect again, leading to an infinite loop if not handled properly
    // 'cause someprop is an array, one [] is not equal to anther []
    // need to be converted it to a string to be dependent value
    sets(newvalue)

  }, [someprop.join()])
}

* useCallback
The `useCallback` hook in React is used to memoize functions so that they are not recreated on every render unless their dependencies change. This can be useful for optimizing performance in certain scenarios. Here's a comparison between using a function without `useCallback` and using it with `useCallback`:

When you define a function directly inside a component without using `useCallback`, a new instance of that function is created on each render. This can lead to unnecessary re-renders, especially when passing functions as props to child components. Here's an example:

```jsx
import React from 'react';

const MyComponent = () => {
  const handleClick = () => {
    console.log('Button clicked');
  };

  return <button onClick={handleClick}>Click me</button>;
};
```

In this example, `handleClick` is recreated on every render of `MyComponent`, even though its implementation remains the same. This can potentially cause performance issues, especially if `MyComponent` is re-rendered frequently.

By using the `useCallback` hook, you can memoize the function and ensure that it is only recreated when its dependencies change. This can optimize performance by preventing unnecessary re-renders caused by function recreation. Here's how you can use `useCallback`:

```jsx
import React, { useCallback } from 'react';

const MyComponent = () => {
  const handleClick = useCallback(() => {
    console.log('Button clicked');
  }, []);

  return <button onClick={handleClick}>Click me</button>;
};
```

In this revised example, `handleClick` is memoized using `useCallback`. The empty dependency array (`[]`) indicates that `handleClick` doesn't depend on any external variables, so it will remain the same across renders unless those dependencies change.

Use `useCallback` when you need to pass functions as dependencies to child components or when optimizing performance by preventing unnecessary re-renders caused by function recreation.

* useRef vs normal const
1. normal
    scoped to the component function and will be recreated every time the component re-renders, the value is not preserved between re-render
    If the variable changes, it will trigger a re-render of the component.

2. useRef
   the value of the `useRef` object persists between re-renders. changing vlaue does not trigger a re-render
   useRef is commonly used to store mutable values that need to persist across renders without causing a re-render.


* context
In React, a `Provider` is a component that allows you to pass down data (often referred to as "context") to all components within its tree without having to manually pass props down through every level of the component hierarchy.

The `Provider` component is part of the Context API, which was introduced in React 16.3. Below,

1. **Context**: This is a way to share values between components without having to explicitly pass a prop through every level of the tree.
2. **Provider**: This component is used to wrap your component tree and make the context value available to all nested components.
3. **Consumer**: This component or the `useContext` hook is used to access the context value within a component.

### Creating a Context

import React from 'react';
const MyContext = React.createContext();
### Providing the Context

Next, you use the `Provider` component to make the context value available to all components within its tree. You typically do this at a high level in your component hierarchy.

import React, { useState } from 'react';
import MyContext from './MyContext';

const MyProvider = ({ children }) => {
  const [value, setValue] = useState('Hello, World!');

  return (
    <MyContext.Provider value={{ value, setValue }}>
      {children}
    </MyContext.Provider>
  );
};

export default MyProvider;

### Consuming the Context

You can consume the context value in two ways: using the `Consumer` component or the `useContext` hook.

#### Using the `Consumer` Component

```jsx
import React from 'react';
import MyContext from './MyContext';

const MyComponent = () => {
  return (
    <MyContext.Consumer>
      {({ value, setValue }) => (
        <div>
          <p>{value}</p>
          <button onClick={() => setValue('New Value')}>Change Value</button>
        </div>
      )}
    </MyContext.Consumer>
  );
};

export default MyComponent;
```

#### Using the `useContext` Hook

This is a more modern and concise way to consume context values.

```jsx
import React, { useContext } from 'react';
import MyContext from './MyContext';

const MyComponent = () => {
  const { value, setValue } = useContext(MyContext);

  return (
    <div>
      <p>{value}</p>
      <button onClick={() => setValue('New Value')}>Change Value</button>
    </div>
  );
};

### When to Use Context

- **Global State**: When you have data that needs to be accessed by many components at different levels of the component tree.
- **Theming**: Passing down theme settings (e.g., dark mode, light mode).
- **User Authentication**: Passing down user information and authentication status.
- **Configuration**: Application-wide settings or configurations.
* closure in react, d3 in react
local var updated in useEffect, can not reflect in other member functions or any d3 event handlers. need to be defined as state of ref to be used in d3 handlers
local var update in d3 event handler1 can be reflect in another d3 event handlers. the character of closure. the function captures init values when they are defined(the time they are created)
JavaScript Closures and Event Listeners: When an event listener is called, it captures the environment (scope) of the function at the time of the event, not necessarily at the time of the function definition. This means that if the variable is modified in the same scope, the callback will reference the updated variable's value.
