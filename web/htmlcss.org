// vertically align center
https://jsbin.com/nopopobito/edit?html,css,output

* clear select: setSelectedValue(null);
* div height is default not greedy
* #content.myClass is faster than div#content.myClass because the tagName adds a filtering step that you don't need. Use tagNames in selectors only where you must!

https://css-tricks.com/multiple-class-id-selectors/

There are differences between #header .callout and #header.callout in css.

Here is the "plain English" of #header .callout:
Select all elements with the class name callout that are descendants of the element with an ID of header.

And #header.callout means:
Select the element which has an ID of header and also a class name of callout.
* How to make a div take the remaining height
** flex
#html
<div id="outer">
  <div id="inner_fixed">
    I have a fixed height
  </div>

  <div id="inner_remaining">
    I take up the remaining height
  </div>
</div>

#css
#outer {
  display: flex;
  flex-flow: column;
  height: 100%;
}

#inner_fixed {
  height: 100px;
  background-color: grey;
}

#inner_remaining {
  background-color: #DDDDDD;
  flex-grow : 1;
}

** Tables (or rather display: table)
#html
<div id="outer">
    <div id="inner_fixed">
        I have a fixed height
    </div>

    <div id="inner_remaining">
        I take up the remaining height
    </div>
</div>
#css
html, body, #outer {
    height: 100%;
    width: 100%;
    margin: 0;
}

#outer {
    display: table;
}

#inner_fixed {
    height: 100px;
    background-color: grey;

    display: table-row;
}

#inner_remaining {
    background-color: #DDDDDD;

    display: table-row;
}

** css3 calc
This approach makes use of the new css function calc(link) to assign a height
that is calculated from the total height minus the height of the other elements.

<div id="inner_fixed">
    I have a fixed height
</div>

<div id="inner_remaining">
    I take up the remaining height
</div>

#css
html, body {
    height: 100%;
    width: 100%;
    margin: 0;
}

#inner_fixed {
    height: 100px;
    background-color: grey;
}

#inner_remaining {
    background-color: #DDDDDD;

    height: calc(100% - 100px);
}

* vertically align text in a div?
top: 50%;
transform: translateY(-50%);
-ms-transform: translateY(-50%);
-moz-transform: translateY(-50%);
-webkit-transform: translateY(-50%);
-o-transform: translateY(-50%);
In my experience it works in many situations and on all major browsers (even IE9+).

If you use SCSS, you might even like to implement this mixin:

@mixin v-align($position: absolute){
    position: $position;  top: 50%;
    transform: translateY(-50%);
    -ms-transform:translateY(-50%); /* IE */
    -moz-transform:translateY(-50%); /* Firefox */
    -webkit-transform:translateY(-50%); /* Safari and Chrome */
    -o-transform:translateY(-50%);
}

1. http://www.jakpsatweb.cz/css/css-vertical-center-solution.html

For CSS2 browser one can use display:table/display:table-cell to center content.

# border of cells will extend to the border of its parent's
div { border:1px solid green;}
<div style="display: table; height: 400px;">
  <div style="display: table-cell; vertical-align: middle;">
    <div>
      everything is vertically centered in modern IE8+ and others.
    </div>
  </div>
</div>
2. that's only valid if you have a single line of text in the div
.center {
  height: 309px;
  line-height: 309px; /* same as height! */
}

3.
The following example makes two (non-trivial) assumptions. If you can meet these assumptions, then this method is for you:

You can put the content that you want to center inside a block and specify a fixed height for that inner content block.
It's alright to absolutely-position this content. (Usually fine, since the parent element inside which the content is centered can still be in flow.
If you can accept the above necessities, the solution is:

Specify the parent container as position:relative or position:absolute.
Specify a fixed height on the child container.
Set position:absolute and top:50% on the child container to move the top down to the middle of the parent.
Set margin-top:-yy where yy is half the height of the child container to offset the item up.
An example of this in code:

<style type="text/css">
	#myoutercontainer { position:relative }
	#myinnercontainer { position:absolute; top:50%; height:10em; margin-top:-5em }
</style>
...
<div id="myoutercontainer">
	<div id="myinnercontainer">
		<p>Hey look! I'm vertically centered!</p>
		<p>How sweet is this?!</p>
	</div>
</div>


Method 1
The following example makes two (non-trivial) assumptions. If you can meet these assumptions, then this method is for you:

You can put the content that you want to center inside a block and specify a fixed height for that inner content block.
It's alright to absolutely-position this content. (Usually fine, since the parent element inside which the content is centered can still be in flow.
If you can accept the above necessities, the solution is:

Specify the parent container as position:relative or position:absolute.
Specify a fixed height on the child container.
Set position:absolute and top:50% on the child container to move the top down to the middle of the parent.
Set margin-top:-yy where yy is half the height of the child container to offset the item up.
An example of this in code:

<style type="text/css">
	#myoutercontainer { position:relative }
	#myinnercontainer { position:absolute; top:50%; height:10em; margin-top:-5em }
</style>
...
<div id="myoutercontainer">
	<div id="myinnercontainer">
		<p>Hey look! I'm vertically centered!</p>
		<p>How sweet is this?!</p>
	</div>
</div>

* half star
<svg version="1.1" xmlns="http://www.w3.org/2000/svg"
    width="200" height="200">
    <defs>
        <linearGradient id="half_grad">
            <stop offset="50%" stop-color="yellow"/>
            <stop offset="50%" stop-color="grey" stop-opacity="1" />
        </linearGradient>
    </defs>
    <path d="M20.388,10.918L32,12.118l-8.735,7.749L25.914,
             31.4l-9.893-6.088L6.127,31.4l2.695-11.533L0,
             12.118l11.547-1.2L16.026,0.6L20.388,10.918z"
        fill="url(#half_grad)" stroke-width="1" stroke="red"/>
</svg>


** small one
<Star currentColor={boolean?'#f7bc0e':'#aeaeae'}/>


        <svg viewBox="64 64 896 896" data-icon="star" width="1em" height="1em" fill={currentColor} aria-hidden="true">
            <defs>
            <linearGradient id="half_grad">
            <stop offset="50%" stop-color={currentColor}/>
            <stop offset="50%" stop-color="grey" stop-opacity="1" />
            </linearGradient>
            </defs>
        <path d="M908.1 353.1l-253.9-36.9L540.7 86.1c-3.1-6.3-8.2-11.4-14.5-14.5-15.8-7.8-35-1.3-42.9 14.5L369.8 316.2l-253.9 36.9c-7 1-13.4 4.3-18.3 9.3a32.05 32.05 0 0 0 .6 45.3l183.7 179.1-43.4 252.9a31.95 31.95 0 0 0 46.4 33.7L512 754l227.1 119.4c6.2 3.3 13.4 4.4 20.3 3.2 17.4-3 29.1-19.5 26.1-36.9l-43.4-252.9 183.7-179.1c5-4.9 8.3-11.3 9.3-18.3 2.7-17.5-9.5-33.7-27-36.3z"
        fill="url(#half_grad)"
        >
        </path>
        </svg>

* Block-level items automatically start on a new line (think headings, paragraphs, and divs) while inline items sit within surrounding content (like images or spans).
The default layout of elements in this way is called the normal flow of a
document, but CSS offers the position property to override it. When the position
of an element is set to relative, it allows you to specify how CSS should move
it relative to its current position in the normal flow of the page. It pairs
with the CSS offset properties of left or right, and top or bottom. These say
how many pixels, percentages, or ems to move the item away from where it is
normally positioned.

Changing an element's position to relative does not remove it from the normal
flow - other elements around it still behave as if that item were in its default
position.

* absolute position remove the element from the normal flow of the document.
absolute div will naturally shrink to fit that content.

https://learn.freecodecamp.org/responsive-web-design/applied-visual-design/lock-an-element-to-its-parent-with-absolute-positioning/
so surrounding items ignore it. it will be locked relative to its closet
positioned ancestor.If you forget to add a position rule to the parent item,
(this is typically done using position: relative;), the browser will keep
looking up the chain and ultimately default to the body tag.

* float: floating elements are removed from the normal flow of the document and pushed to either left or right of their containing parent element.
It's commonly used with the width property to specify how much horizontal the
floated element requires

* Hue is what people generally think of as 'color'. If you picture a spectrum of colors starting with red on the left, moving through green in the middle, and blue on right, the hue is where a color fits along this line. In hsl(), hue uses a color wheel concept instead of the spectrum, where the angle of the color on the circle is given as a value between 0 and 360.

Saturation is the amount of gray in a color. A fully saturated color has no gray in it, and a minimally saturated color is almost completely gray. This is given as a percentage with 100% being fully saturated.

Lightness is the amount of white or black in a color. A percentage is given ranging from 0% (black) to 100% (white), where 50% is the normal color.

* gradient: Applying a color on HTML elements is not limited to one flat hue.
CSS provides the ability to use color transitions, otherwise known as gradients, on elements.

* add interactivity to an element using the transform property combined with hover state
p:hover {
  transform: scale(2.1);
}

* crescent moon shape
<style>
.moon
{
  position: absolute;
  margin: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  width: 100px;
  height: 100px;

  background-color: transparent;
  border-radius: 50px;
  box-shadow: 25px 10px 0px 0px green;
}
div:hover{
  box-shadow: 25px 10px 10px 10px green;
}
</style>
<div class="moon"></div>

* ::before and ::after pseudo-elements
are used to add something before or after the selected element

* heart
<style>
.heart {
  position: absolute;
  margin: auto;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  background-color: pink;
  height: 50px;
  width: 50px;
  transform: rotate(-45deg);
}
.heart::after {
  background-color: red;
  content: "" ;
  border-radius: 50%;
  position: absolute;
  width: 50px;
  height: 50px;
  top: 0px;
  left: 25px;
}
.heart::before {
  content: "";
  background-color: blue;
  border-radius: 50%;
  position: absolute;
  width: 50px;
  height: 50px;
  top: -25px;
  left: 0px;
}
</style>
<div class = "heart"></div>

* font
FAMILY_NAME as in the following example:
font-family: FAMILY_NAME, GENERIC_NAME;.

The GENERIC_NAME is optional, and is a fallback font in case the other specified font is not available.

font degrade
Family names are case-sensitive and need to be wrapped in quotes if there is a space in the name.
For example, if you wanted an element to use the Helvetica font, but degrade to the sans-serif font when Helvetica wasn't available, you will specify it as follows:

p {
  font-family: Helvetica, sans-serif;
}
There are several default fonts that are available in all browsers. These generic font families include monospace, serif and sans-serif
Generic font family names are not case-sensitive. Also, they do not need quotes because they are CSS keywords.
* border
  .thick-green-border {
    border-color: green;
    border-width: 10px;
    border-style: solid;
    border-radius: 50%; //Make Circular Images with a border-radius
  }
* padding
An element's padding controls the amount of space between the element's content and its border
* margin
An element's margin controls the amount of space between an element's border and surrounding elements
If you set an element's margin to a negative value, the element will grow larger.
* negative margin
** When a static element is given a negative margin on the top/left, it pulls the element in that specified direction. For example:
/* Moves the element 10px upwards */
#mydiv {margin-top:-10px;}

** But if you apply it to the bottom/right
it doesn’t move the element down/right as you might think. Instead, it pulls any succeeding element into the main element, overlapping it.

/*
 * All elements succeeding #mydiv1 move up by
 * 10px, while #mydiv1 doesn’t even move an inch.
*/

#mydiv1 {margin-bottom:-10px;}

** If no width is applied,
adding Negative Margins to its left/right pulls the element in both directions increasing its width. It’s here that the margin acts like a padding.

* NEGATIVE MARGINS ON FLOATED ELEMENTS
If a negative margin is applied opposite a float, it creates a void leading to
the overlapping of content. This is great for liquid layouts where one column
has a width of 100% while the other has a definite width, like 100px.

#mydiv1 {float:left; margin-right:-100px;}
<div id=“mydiv1”>First</div>
<div id=“mydiv2”>Second</div>

'First' is overlapped by 'Second', and both are in the save line

If the negative margin is equal to the actual width, then it overlaps it
entirely. This is because margins, padding, borders, and width add up to the
total width of an element. So if a negative margin is equal to the rest of the
dimensions then the element’s width effectively becomes 0px.

** MAKING A SINGLE INTO A 3-COLUMN LIST
<style>
  ul {list-style:none;}
  li {line-height:1.3em;}
  .col2 {margin-left:100px;}
  .col3 {margin-left:200px;}
  .top {margin-top:-2.6em;} /* the clincher */
</style>
<ul>
   <li class="col1">Eggs</li>
   <li class="col1">Ham<li>
   <li class="col2 top">Bread<li>
   <li class="col2">Butter<li>
   <li class="col3 top">Flour<li>
   <li class="col3">Cream</li>
</ul>

** SMASHING 3D TEXT EFFECTS
Here’s a neat trick. Create Safari-like text, which are slightly beveled by
creating 2 versions of your text in 2 different colors. Then use negative
margins to overlap one over the other with a discrepancy of around 1 or 2 pixels
and you’ve got selectable, robot-friendly beveled text! No need for huge jpegs
or gifs which devour bandwidth like fat pigs.

** SIMPLE 2-COLUMN LAYOUTS
Negative margins are also a great way to create simple 2-column liquid layouts
where the sidebar has a preset width and the content has a liquid width of 100%

#content {width:100%; float:left; margin-right:-200px;}
#sidebar {width:200px; float:left;}
#content p {margin-right:180px;}

And there you have a simple 2-column layout record time. It works flawlessly in
IE6 too! Now, to prevent #sidebar from overlapping the text inside #content,
simply add

<div id="content"> <p>Main content in here</p> </div>
<div id="sidebar"> <p>I’m the Sidebar! </p> </div>
** NUDGING ELEMENTS INTO PLACE
This is the most common (and simplest) usage for negative margins. If you’re
inserting a 10th div in a sea of 9 other divs and somehow it just won’t align
properly, use negative margins to nudge that 10th div into place instead of
having to edit the other 9.
* Use Attribute Selectors to Style Elements
[type='radio'] {
  margin: 20px 0px 20px 0px;
}
<label><input type="radio" name="indoor-outdoor"> Outdoor</label><br>
* Understand Absolute versus Relative Units
Absolute units tie to physical units of length. For example, in and mm refer to
inches and millimeters, respectively. Absolute length units approximate the
actual measurement on a screen, but there are some differences depending on a
screen's resolution.

Relative units, such as em or rem, are relative to another length value. For example, em is based on the size of an element's font. If you use it to set the font-size property itself, it's relative to the parent's font-size.

* override css style
 the order of the class declarations in the <style> section are what is
 important. The second declaration will always take precedence over the first.
 Because .blue-text is declared second, it overrides the attributes of
 .pink-text
 It doesn't matter which order the classes are listed in the HTML element

 id declarations override class declarations, regardless of where they are declared in your style element CSS.
 Override id with Inline Styles

 Override All Other Styles by using Important
 In many situations, you will use CSS libraries. These may accidentally override
 your own CSS. So when you absolutely need to be sure that an element has
 specific CSS, you can use !important


* Use Abbreviated Hex Code red's hex code #FF0000 can be shortened to #F00

* Attach a Fallback value to a CSS Variable
When using your variable as a CSS property value, you can attach a fallback
value that your browser will revert to if the given variable is invalid.

: This fallback is not used to increase browser compatibilty, and it will not work on IE browsers. Rather, it is used so that the browser has a color to display if it cannot find your variable.

background: var(--penguin-skin, black);

** Improve Compatibility with Browser Fallbacks
<style>
  html {
    --red-color: red;
  }
  .red-box {
    background: red;  // fall back value if the variable belows doesn't work
    background: var(--red-color);
    height: 200px;
    width:200px;
  }
</style>
<div class="red-box"></div>

* div semi transparent
.transparent{
  background:rgba(255,255,255,0.5);
}
This will give you 50% opacity while the content of the box will continue to have 100% opacity.
If you use opacity:0.5, the content will be faded as well as the background. Hence do not use it.

* length unit in css
** The “px” unit in CSS doesn't really have anything to do with screen pixels, despite the poorly chosen name. It's actually an non-linear angular measurement
1in == 96px
1cm == 37.8px
Without any CSS at all, 1em would be:
https://css-tricks.com/the-lengths-of-css/
1em == 16px == 0.17in == 12pt == 1pc == 4.2mm == 0.42cm
Making things a tiny bit funkier, em units multiply upon themselves when applied
to font-size, so if an element with font-size 1.1em is within an element with
font-size 1.1em within yet another element with font-size 1.1em, the resulting
size is 1.1 ✕ 1.1 ✕ 1.1 == 1.331rem (root em). Meaning even if an element is set
to, say 10em, that doesn't mean it will be a consistent width everywhere it
appears.

rem:
A relative unit, like em, but it is always relative to the "root" element
(i.e. :root {}) rather than using the cascade like em does. This vastly
simplifies working with relative units.
pt:
A point is a physical measurement equal to 1/72 of an inch.

** vh vw
height: 100vh = 100% of the viewport height
This is the "viewport width" unit. 1vw is equal to 1% of the width of the
viewport. It is similar to percentage, except that the value remains consistant
for all elements regardless of their parent elements or parent elements width. A
bit like how rem units are always relative to the root.

1vmin = 1vw or 1vh, whichever is smaller
1vmax = 1vw or 1vh, whichever is larger

height: 100% = 100% of the parent's element height

That is why you need to add height: 100% on html and body, as they don't have a size by default

Something you have to know : if you use % for vertical margin or padding, % will be calculated on the width of the parent element, not the height.

** height: 100vh = 100% of the viewport height

Technically, this is true, but a better way to think of it is = 100% of the available height.

If you are looking to fill up a div with the available height, that's a mighty useful trick. Before I learned this, I would have to ensure every div from html down to the nested div had a height of 100% which can be tedious and error prone. Instead, I now just use height:100vh on the nested item.

** View port units = vw, vh, vmin, and vmax - are based on the size of the browser viewport. Because, their actual size changes depending on the Viewport Size, this makes them great units for responsive design

Note: When dealing with widths, the % unit is more suitable but with heights, the vh unit is better.

the width of the viewport will actually be larger than the width of the html element.

Viewport > html > body

* right arrow
<p>Right arrow: <i class="arrow right"></i></p>
.right {
  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
}

i {
  border: solid #999999;
  border-width: 0px 3px 3px 0px;
  display: inline-block;
  padding: 3px;
}

* siderbar with arrow button
<!DOCTYPE html>
<html>
<body>
  <div class="sidebar">
    <div class="arrowdiv right"></div>
  </div>
    <div class="sidebar2"></div>
  <br/>
</body>
</html>

.sidebar{
  position: relative;
  left: 0;
  top: 0;
  height: 280px;
  width: 80px;
  border: 1px blue solid;
  display:inline-block;
}

.sidebar:after{
  content: "";
  position:absolute;
  border: red solid;
  border-width: 1px 1px 1px 0px;
    top: 0;
    bottom: 0;
    right: -14px;
    width: 12px;
    height: 40px;
    margin: auto;
}
.arrowdiv{
  position: absolute;
  border: solid #999999;
  border-width: 0px 3px 3px 0px;
  height: 8px;
  width: 8px;
  top: 0;
  bottom: 0;
  margin: auto;
  right: -10px;
}

.right {
  transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
}

.sidebar2{
  position: relative;
  left: 0;
  top: 0;
  height: 280px;
  width: 80px;
  border: 1px blue solid;
  margin-left: 5px;
  display:inline-block;
}

* inline vs inline-block block
Inline elements:
respect left & right margins and padding, but ~not~ top & bottom
~cannot~ have a width and height set
allow other elements to sit to their left and right.
see very important side notes on this [[https://hacks.mozilla.org/2015/03/understanding-inline-box-model/][here]].

Block elements:
respect all of those
force a line break after the block element
acquires full-width if width not defined

Inline-block elements:
allow other elements to sit to their left and right
respect top & bottom margins and padding
respect height and width

* warn info error
.isa_info, .isa_success, .isa_warning, .isa_error {
    margin: 10px 0px;
    padding:12px;

}
.isa_info {
    color: #00529B;
    background-color: #BDE5F8;
}
.isa_success {
    color: #4F8A10;
    background-color: #DFF2BF;
}
.isa_warning {
    color: #9F6000;
    background-color: #FEEFB3;
}
.isa_error {
    color: #D8000C;
    background-color: #FFD2D2;
}

* show btn when tr hover
  <table>
    <tr>
      <td>A</td>
      <td>B</td>
      <td>C</td>
      <td>D <button class="delete">Delete</delete></td>
    </tr>
  </table>

table, tr, td {
  border: 1px solid #ddd;
}

.delete {
  visibility: hidden;
}

tr:hover .delete {
  visibility: visible;
}
