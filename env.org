# tmux
cd && git clone https://github.com/Zenoe/tmux tmuxconf
ln tmuxconf/.tmux.conf ~/.tmux.conf

cd ~/tmuxconf && git clone --depth 1 https://github.com/tmux-plugins/tmux-resurrect

# crontab
timedatectl set-timezone Asia/Shanghai
# crontab
crontab -l > mycron
#echo new cron into cron file
echo "* */12 * * * rsync -az ab@172.20.94.86:/cygdrive/c/worktips /root/lzy/databk" >> mycron
#install new cron file
crontab mycron
rm mycron


apt install -y tinyproxy zsh fasd build-essential subversion xclip cargo libssl-dev zlib1g-dev libreadline-dev libbz2-dev expect

cargo install fd-find

curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
mkdir -p ~/lzy

git clone https://github.com/zsh-users/zsh-autosuggestions ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting


# emacs
sudo apt install -y build-essential texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev libgnutls28-dev
# for ubuntu20 to support --with-native-compilation
apt install -y libgccjit-9-dev
# for ubuntu20 to support --with-json
apt install -y libjansson-dev
emacsVer=28.2
wget http://ftp.gnu.org/gnu/emacs/emacs-${emacsVer}.tar.gz
tar xvzf emacs-${emacsVer}.tar.gz

cd emacs-${emacsVer}
./configure --with-native-compilation --with-json
make -j 8 && make install

# in case emacs native compilation cannot find libgccjit library
# apt-get install -y libgccjit-10-dev gcc-10 build-essential
# CC="gcc-10" ./autogen.sh
# ./configure --with-native-compilation --with-json

# doom emacs interactive
git clone --depth 1 https://github.com/doomemacs/doomemacs ~/.emacs.d
~/.emacs.d/bin/doom install

cd ~/.doom.d && git clone https://github.com/Zenoe/emacconf

echo '(package! xclip)' >> ~/.doom.d/packages.el
echo '(load-file "~/.doom.d/emacconf/config.el")' >> ~/.doom.d/config.el

# needed by vterm
apt -y install libtool libtool-bin libvterm-dev


apt install -y node-js-beautify
* zsh
apt -y install zsh git
sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
# change default shell for user test
# chsh -s /bin/bash test
chsh -s $(which zsh)
source .zshrc

# h - prints your history
# hs [searchterm] - searches your history with grep
# hsi [serachterm] - same as above but case insensitive.
plugins=( zsh-autosuggestions  zsh-syntax-highlighting copypath history)
bindkey '^ ' autosuggest-accept
bindkey '^b' autosuggest-execute

* ripgrep pcre2
#apt -y install cargo
git clone --depth 1 https://github.com/BurntSushi/ripgrep
cd ripgrep
# pcre2 is needed by emacs vertico (doom doctor)
cargo build --release --features 'pcre2'
mv ./target/release/rg /usr/sbin

* update cmake
sudo apt remove cmake
Visit https://cmake.org/download/ and download the latest bash script.

In my case cmake-3.6.2-Linux-x86_64.sh is sufficient.
Copy the script to /opt/.

Make the script executable:

chmod +x /opt/cmake-3.*your_version*.sh
Change to desired installation directory (to /opt/ for example)

As of cmake 3.10.2 the installer no longer seems to install to /opt by default
Run:

sudo bash /opt/cmake-3.*your_version*.sh
You will need to press y twice.

The script installs the binary to /opt/cmake-3.*your_version* so in order to get the cmake command, make a symbolic link:

sudo ln -s /opt/cmake-3.*your_version*/bin/* /usr/local/bin


* npm
npm install -g cnpm yarn cross-env eslint eslint_d prettier pnpm

* tmux
VERSION=3.3a
wget https://github.com/tmux/tmux/archive/refs/tags/${VERSION}.tar.gz

# this tar doesn't include tmux.h, cause make error
#wget https://github.com/tmux/tmux/releases/download/${VERSION}/tmux-${VERSION}.tar.gz

tar xf tmux-${VERSION}.tar.gz
rm -f tmux-${VERSION}.tar.gz
cd tmux-${VERSION}
./configure
make
sudo make install

mkdir -p ~/tmuxconf
cd ~/tmuxconf

git clone --depth=1 https://github.com/tmux-plugins/tmux-resurrect
git clone https://github.com/tmux-plugins/tmux-continuum ~/tmuxconf/tmux-continuum

* pip
# install pip2
apt update
curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py
python2 get-pip.py
python2 get-pip.py --proxy=10.110.198.52:20171
* In Python 3.6+, the pyvenv module is deprecated. Use the following one-liner instead:
python3 -m venv <myenvname>
This is the recommended way to create virtual environments by the Python community.
* pyenv
pyenv install -l
** install
sudo apt-get update && sudo apt-get install libssl-dev

git clone https://github.com/pyenv/pyenv.git ~/.pyenv


echo 'export PYENV_ROOT="$HOME/.pyenv"' >> /etc/profile.d/alan.sh
echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /etc/profile.d/alan.sh
echo 'eval "$(pyenv init --path)"' >> /etc/profile.d/alan.sh
echo 'eval "$(pyenv init -)"' >> /etc/profile.d/alan.sh

# install virtualenv
git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv
echo 'eval "$(pyenv virtualenv-init -)"' >> /etc/profile.d/alan.sh

* install new pyenv
pyenv virtualenv 3.10.10 pybatfish2
pyenv activate pybatfish2

* netplan
network:
  version: 2
  renderer: networkd
  ethernets:
    eno1:
      dhcp4: false
      dhcp6: false
     addresses:
      - 172.28.57.108
     routes:
      - to: default
        via: 172.28.57.1
     nameservers:
       addresses: [192.168.58.110]




* openjdk
apt-get install openjdk-17-jdk
export JAVA_HOME=$(dirname $(dirname $(readlink -f $(which java))))
export PATH=$PATH:$JAVA_HOME/bin

* ssh
vi /etc/ssh/sshd_config
and enable the password authentication

PasswordAuthentication yes
PermitRootLogin yes

systemctl restart ssh

change root password
sudo passwd root
