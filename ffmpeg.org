https://shotstack.io/learn/use-ffmpeg-to-trim-video/

for f in *.rm ; do
  ffmpeg -i "$f" "${f%.*}.mkv"
done
* somone's note
ffmpeg notes
2016-03-08

src: https://www.youtube.com/watch?v=BiMP_hN8f6s

And here are the ffmpeg pdf slides, courtesy of the original author.

Terminology
Containers are demuxed into Streams Streams are decoded to frames Frames are filtered Frames are encoded back in Streams Streams are muxed back in Containers

Container is a file format:

streams are within containers
examples: mp4, webm, avi.
Streams are media components

video (h264, mpeg-2, wmv, vp8)
audio (mp3, aac, wma)
subtitles
Streams are formatted/stored/encoded with codec

generally, any codec/stream can be within a container, but numerous exceptions
GOP (group of pictures)

full frame vs differential frame
lots of video doesn't change significantly from frame to frame
Extract mp3 from video
ffmpeg -i imagine.mp4 imagine.mp3
-i => next token is input
last token is output
audio transcoded from AAC to MP3
Get info from mp4
ffprobe -i imagine.mp4
Copy audio from video
ffmpeg -i imagine.mp4 -vn -c:a copy imagine.aac
-vn => video none
-c:a copy => copy audio in its input codec (c means codec)
VERY FAST: bitwise copy
Reduce audio bitrate
ffmpeg -i imagine.aac -ab 96k imagine96.aac
ffmpeg -i test.aac -ab 96k -strict -2 test96.aac
-ab 96k => audio, bitrate 96 kbps (kilo bits per seconds, KB: kilobytes, kbi: use 1024 octets per kilo instead of 1000)
requires re-encoding of audio (much slower than -c:a copy)
output file name extension determines codec
bit depth (vertical), possible amplitude levels
sampling rate (hozitontal), time between samples
bit rate (combination vertical + horizontal), bit/s
when changing bitrate, sampling rate does not change, effectively changing bit-depth
Copy Clip
ffmpeg -i blink_lv.mp4 -ss 11:38 -t 02:00 -c copy i_miss_you_lv.mp4
-ss 13:38 => skip 13m38s into input
-t 02:00 => duration, process input for 2 min
-c copy => codec copy
shortcut for -c:v copy -c:a copy -s:a copy
-c is short for -codec
notice video is messed up at start of output clip
because of key frames - GOP - to be discussed later
Video Snapshots
ffmpeg -i blink_lv.mp4 -r .01 blink_lv_%03d.png
-r .01 => process input at rate of .01 Hz
1 frame every 100 seconds
use -r 1 to make 1 frame every seconds
use -r .33 to make 1 frame every 3 seconds
blink_lv_%03d.png
%03d => string format for each image output
On my mac, it took 230 seconds (3 minutes and 50 seconds) to create snapshots for a regular 878Mo mp4 (duration: 39min26s), with a rate of 1 image every 3 seconds (-r 0.33) (783 snapshots created).

1080 to 720
ffmpeg -i michel_soccer1.MOV -vf scale=-1:720 michel_soccer1_720.MOV
ffmpeg -i michel_soccer1.MOV -vf scale=-1:720 -strict -2 michel_soccer1_720.MOV
-vf scale=-1:720
v: video
f: filter
scale: scale filter, change dimensions
-1: width, retain width/height ratio from source
720: height
re-encoding
Animated GIF
ffmpeg -i michael_soccer1 720.MOV -r 2 michael_soccer.gif
-r 2 => take frames at 2Hz (every 0.5 seconds)
Merge Audio and Video
ffmpeg -i revolusion.mp3 -i michael_soccer1_720.MOV -c:v copy -c:a copy -shortest soccer_merged.mp4
-i revolusion.mp3 => audio we want
-i michael_soccer1_720.MOV => video we want
-shortest => end endcoding after shortest clip
default stream mappings
how was audio chosen ? revolusion.mp3, michael_soccer, both?
-> audio with highest sampling rate (44100Hz, 48000Hz, ...) is chosen by default
-> if there is a tie, then it takes the audio that was first on the command line
-> you can override defaults with the map option
Concatenate Videos
ffmpeg -f concat -i file_list.txt -c copy michael_soccer_concatenated.MOV
-f concat => force format concatenate format
-i file_list.txt => file names to concatenate in file_list.txt
-c copy => use same audio/video codecs as source
bitwise copy
(content of file_list.txt)

file 'michael_soccer1.MOV'
file 'michael_soccer2.MOV'
file 'michael_soccer3.MOV'
Note: on my mac, this doesn't work well: I tested 2 files concatenation, and audio streams were concatenated correctly, but the second video stream was not synced with the audio content. I got many of the following error, which I didn't resolve:

Non-monotonous DTS in output stream 0:0; previous: 889200, current: 601600; changing to 889201. This may result in incorrect timestamps in the output file

Tips
-loglevel panic: make ffmpeg silent
-y => always overwrite output w/o asking
-n => never overwrite output
* Concatenate two mp3 files using ffmpeg
https://stackoverflow.com/questions/7333232/concatenate-two-mp4-files-using-ffmpeg
I was trying to concatenate three .mp3 audio files into one .m4a file and this ffmpeg command works.

Input command:

ffmpeg -i input1.mp3 -i input2.mp3 -i input3.mp3 -filter_complex concat=n=3:v=0:a=1 -f MOV -vn -y input.m4a
Meanings of : " -filter_complex concat=n=3:v=0:a=1" : 
concat means use the media concatenate (joining) function.
n means confirm total count of input files.
v means has video? use 0 = no video, 1 = contains video.
a means has audio? use 0 = no audio, 1 = contain audio.
-f means force set file format (to see all supported formats, use ffmpeg -formats)
-vn means disable video (and also -an would disable audio if not wanted)
-y means overwrite output files (if the output file already exists).
For more info: use ffmpeg -h full print all options (including all format and codec specific options, very long)
* slice
ffmpeg -i input.mp4 -ss 00:05:10 -to 00:15:30 -c:v copy -c:a copy output2.mp4

        Note that if you specify -ss before -i, -to will have the same effect as -t, i.e. it will act as a duration.

        $ ffmpeg -ss 00:05:20 -i input.mp4 -t 00:10:00 -c:v copy -c:a copy output3.mp4

        $ ffmpeg -ss 00:05:20 -i input.mp4 -to 00:10:00 -c:v copy -c:a copy output4.mp4
        The above commands both result in videos that are 10 minutes long that are from 00:05:20 to 00:15:20 of the input video.

ffmpeg <start time> <input file> <cut duration> <out file>
# cut the first 30 seconds
ffmpeg.exe -ss 00:00:30 -i input output

# cut except in the reange of 00:00:30--00:00:40
ffmpeg.exe -ss 00:00:30 -i input -t 10 output
ffmpeg.exe -ss 30 -i input -t 10 output

# avoid using -c copy
-ss combined with -c copy resulted in a half-second chop at the start.
To avoid that, you have to remove the -c copy (which admittedly will do a transcode).


As other people mentioned, putting -ss before (much faster) or after (more accurate) the -i makes a big difference. The section "Fast And Accurate Seeking" on the ffmpeg seek page tells you how to get both, and I have used it, and it makes a big difference. Basically you put -ss before AND after the -i, just make sure to leave enough time before where you want to start cutting to have another key frame.

Example: If you want to make a 1-minute clip, from 9min0sec to 10min 0sec in Video.mp4, you could do it both quickly and accurately using:

ffmpeg -ss 00:08:00 -i Video.mp4 -ss 00:01:00 -t 00:01:00 -c copy VideoClip.mp4
The first -ss seeks fast to (approximately) 8min0sec, and then the second -ss seeks accurately to 9min0sec, and the -t 00:01:00 takes out a 1min0sec clip.

Also note this important point from that page: "If you use -ss with -c:v copy, the resulting bitstream might end up being choppy, not playable, or out of sync with the audio stream, since ffmpeg is forced to only use/split on i-frames."

This means you need to re-encode the video, even if you want to just copy it, or risk it being choppy and out of sync. You could try just -c copy first, but if the video sucks you'll need to re-do it.
* Cut the end of a video
The seeking command has another variant -sseof that you can use to cut the last N seconds from a video. It uses negative values to indicate positions relative to the EOF (end of file). Position 0 is at EOF.

$ ffmpeg -sseof -600 -i input.mp4 -c copy output5.mp4

$ ffmpeg -sseof -00:10:00 -i input.mp4 -c copy output6.mp4
Both of the above two commands will make a cut of the last 10 minutes of the input video.

If you use a time that is longer than the input video, e.g. -01:10:00 for a 20 minute video, the command will still run. The output video will be the same length as the input.

* merge videos
Then I created a simple batch file (concat.bat), with the following contents:

:: Create File List
echo file file1.mp4 >  mylist.txt 
echo file file2.mp4 >> mylist.txt

:: Concatenate Files
ffmpeg -f concat -i mylist.txt -c copy output.mp4
The batch file, and ffmpeg.exe, must both be put in the same folder as the .mp4 files to be joined. Then run the batch file. It will typically take less than ten seconds to run.
* merge video with audio
使用的条件是：视频文件中没有音频
ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac -strict experimental
output.mp4video.mp4,audio.wav分别是要合并的视频和音频，output.mp4是合并后输出的音视频文件。
** 用audio音频替换video中的音频
ffmpeg -i video.mp4 -i audio.wav -c:v copy -c:a aac -strict experimental -map 0:v:0 -map 1:a:0 output.mp4
