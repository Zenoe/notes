* 优秀程序员思考、学习新技术的原则和方式
最近了解了几个 MVC 的框架，其中有两个是公司内部的。发现这些东西都是类似的，从处理
逻辑到页面渲染；从 service 到 layout；配置的实现无非就是 XML，或者 annotation……
我有种感觉，兴许已经跳不出这个思维圈子了？

欠缺思考容易导致这样的现象：

不会做设计

遇到了问题，拿见到过的、学到了的熟悉的框架、方案、模式往上套，而不仔细分析其中的
利弊，只是尽可能地寻找最接近当前问题的解决途径。

不能坚持自己的观点

这一点在面试中最容易观察到。应聘者有刚毕业的学生，也有工作超过 10 年的有丰富经验
的从业者。他给出一个粗略的方案以后，在方案没有细化到一定程度以前，很难给出优劣的
评论，但是，如果你轻轻地 challenge 一下，他就迅速放弃本来的构思，跑到你的思路上来。

例如，SNS 系统中，服务端有消息要怎样通知到客户端，这样的一个问题，解决方案有很多
种，比如客户端轮询、服务端 hold 住连接推送等，各有利弊。应聘者应当有自己的观点。

不能细化一个问题解决方案

怎样区分一个空谈家和一个实干家？给他一个具体的问题是最好的办法。在我刚工作的时候，
我曾经很钦佩那些在活动中、讨论中高谈阔论的人，我觉得他们很能说。可是后来我逐渐发
现，能说的人实在是太多太多了。细化设计、甚至落到编码，才是对一个程序员真实的检验。

如果你会学习，你可以成长得很快；如果你不会思考，你永远只能跟在别人后面。

在新技术的学习上我认为也应当多思考，不同的人有不同的学习动机。在非外界所迫的情况
下，对于新技术的学习，我的观点可以概括为：

它要解决什么问题，就是所谓的问题域，是我关心的吗？

我没有去研究操作系统底层的实现，并非这没有价值，而是我没有兴趣，这就是问题域的影
响（不过现在我有兴趣了，我想做一些这方面的事情）。



新技术学习的方式呢，我想说这么几点：

寻找切入点

“理论不懂就实践，实践不会就学理论！”。

最后最好是要落到动手实践上去的，但是倘若习惯从那些原理介绍的文字入手，未尝不是一
种不好的选择。而且，现实情况会有一些约束，例如在了解几家互联网公司的云平台的时候
（Amazon 的 EC2，M$的 Azure 等等），除非你是这几家公司的员工，否则是很难深入其中
的。

善于比较

* 一名程序感悟：
抽象。计算机中的oop编程。处理任何问题时不要只看到表面，要不停的思考，再抽象一个层次，更能接近事物的本质。
预读。计算机中操作系统预读可以有效的减少磁盘的寻道次数和应用程序的I/O等待时间。生活中也是，凡事预则立不预则废。
缓存,缓冲。计算机中操作系统中硬件经常用的。两个极端不匹配的东西放到一起时就要做缓冲，缓存等。
分治。计算机中的快排等都用到分治。就是麦肯锡的mece原则,沟通做事都可采用。分解问题，各个击破。
贪心。计算机中的贪心算法。处理事情时候也是如此，抓大放小。

* signalled and not
Every waitable object has a boolean value attached to it, named the signalled state, that is used to wait for that object; if the object is signalled, then the wait functions will not wait for it; if the object is non-signalled, then the wait functions will wait for it.

Now, how does this apply to a particular type of object? That depends on the objects nature and specifically on the semantics associated to waiting for it. Actually, the signalled state is defined in terms of wait condition. the For example (see the docs for details):

A mutex is signalled when it is not owned.
An process/thread is signalled when it has finished.
A semaphore is signalled when its count is greater than 0.
A waitable timer is signalled when it has expired.
You might like better if a mutex were signalled when owned, but actually it is when not owned. That's necessary to make the wait functions do the right thing.

And what about the events? Well, they are somewhat simple objects, you can signal and de-signal them at will, so the signal state has no additional meaning:

signalled: Threads will not wait for it.
non-signalled: Threads will wait for it.
Events also have this SignalPulse and AutoReset things that are a bit peculiar (and IME practically impossible to use right).
