* M-x list-faces-display shows you all faces WYSIWYG, and gives you links to their doc and to customizing them.
* copilot
Ensure your Emacs version is at least 27, the dependency package editorconfig (melpa) and jsonrpc (elpa, >= 1.0.14) are both installed.

Install Node.js v18+. (You can specify the path to node executable by setting copilot-node-executable.)

Setup copilot.el as described in the next section.

Install the copilot server by M-x copilot-install-server.

Login to Copilot by M-x copilot-login. You can also check the status by M-x copilot-diagnose (NotAuthorized means you don't have a valid subscription).

(package! copilot
  :recipe (:host github :repo "copilot-emacs/copilot.el" :files ("*.el")))
Configure copilot in ~/.doom.d/config.el:

;; accept completion from copilot and fallback to company
(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)))
Strongly recommend to enable childframe option in company module ((company +childframe)) to prevent overlay conflict.

If pressing tab to complete sometimes doesn't work you might want to bind completion to another key or try:

(after! (evil copilot)
  ;; Define the custom function that either accepts the completion or does the default behavior
  (defun my/copilot-tab-or-default ()
    (interactive)
    (if (and (bound-and-true-p copilot-mode)
             ;; Add any other conditions to check for active copilot suggestions if necessary
             )
        (copilot-accept-completion)
      (evil-insert 1))) ; Default action to insert a tab. Adjust as needed.

  ;; Bind the custom function to <tab> in Evil's insert state
  (evil-define-key 'insert 'global (kbd "<tab>") 'my/copilot-tab-or-default))
If you would love to configure indentation here, this is an example config that may work for you:

(use-package! copilot
  :hook (prog-mode . copilot-mode)
  :bind (:map copilot-completion-map
              ("<tab>" . 'copilot-accept-completion)
              ("TAB" . 'copilot-accept-completion)
              ("C-TAB" . 'copilot-accept-completion-by-word)
              ("C-<tab>" . 'copilot-accept-completion-by-word)
              ("C-n" . 'copilot-next-completion)
              ("C-p" . 'copilot-previous-completion))

  :config
  (add-to-list 'copilot-indentation-alist '(prog-mode . 2))
  (add-to-list 'copilot-indentation-alist '(org-mode . 2))
  (add-to-list 'copilot-indentation-alist '(text-mode . 2))
  (add-to-list 'copilot-indentation-alist '(closure-mode . 2))
  (add-to-list 'copilot-indentation-alist '(emacs-lisp-mode . 2)))

Looks like ollama-copilot has instructions for setting up neovim using copilot.vim. Seeing as copilot.el is using copilot.vim, seems possible we could use this and set copilot-network-proxy accordingly? Though from a quick glance at the copilot.el code I don't see anything about the strict ssl setting, so setting that might be an issue.

Hoping to experiment with this myself soon, but in case someone beats me to it üôÇ

It actually works!
Regarding "strict ssl": have a look at the variable copilot-network-proxy in copilot.el. You should use :rejectUnauthorized :json-false.
* tree-sitter
check: eval-expression (treesit-available-p)
* Selective display:
C-u <n> C-x $ folds all the lines starting with <n> or more spaces;
C-x $ shows everything.

(defun fold-level-2 ()
    (interactive)
    (set-selective-display (* 2 tab-width)))
* press s to search a char, if the char does not exit in current line, press ; will find the first char in the lines below, press , to search reversely
* vertico search result:
        "C-M-j" #'vertico-next-group
        "C-M-k" #'vertico-previous-group
        "C-i" or tab : go to next vertico group
* popup--display-buffer-alist
https://github.com/emacsorphanage/popwin
jump to popup window
+popup/other
* exec-path:
exec-pathÊòØ‰∏Ä‰∏™EmacsÂÜÖÈÉ®ÂèòÈáè EmacsÁî®Êù•Êü•ÊâæÂèØÊâßË°åÊñá‰ª∂„ÄÇÂ¶ÇM-x compile
(setenv "PATH"): ËÆæÁΩÆEmacsËøõÁ®ãÁöÑÁéØÂ¢ÉÂèòÈáèPATH„ÄÇÂØπ‰∫éEmacsÂêØÂä®ÁöÑÂ≠êËøõÁ®ãÂæàÈáçË¶Å
* toggle-truncate-lines
visual-line-mode
when the logical line is long to exceed the width of window
* evil easymotion: gs
* vim-sneak
; to go to the next match (or s again, if s_next is enabled;
3; to skip to the third match from the current position.
ctrl-o or `` to go back to the starting point.
Type s<Enter> at any time to repeat the last Sneak-search.
Type S to search backwards.
* copy text from minibuffer
C-x h (mark-whole-buffer) then M-w (kill-ring-save)
* evil replace
& Ë°®Á§∫ÂΩìÂâçÂåπÈÖçÁöÑÊñáÊú¨
:%s/xxx/get& ==> Êää xxx ÊõøÊç¢‰∏∫ getxxx
* some keys
Remove parentheses around region: sp-splice-sexp : gb
[ a: evil-backward-arg
] a: evil-forward-arg
* Alignment messed up in emacs  (dired buffer) :font:
I started to find the font current used by emacs, and it was dejavu-sans. which
I then though was not a fixed font.

By luck I download Hack font recommended by some one from internet. and followed
the instructions to install it on the linux host.
Restart emacs X windows, everything was find!

Linux
Download the latest version of Hack.
Extract the files from the archive (.zip).
Copy the font files to either your system font folder (often /usr/share/fonts/) or user font folder (often ~/.local/share/fonts/ or /usr/local/share/fonts).
Copy the font configuration file in config/fontconfig/ to either the system font configuration folder (often /etc/fonts/conf.d/) or the font user folder (often ~/.config/fontconfig/conf.d)
Clear and regenerate your font cache and indexes with the following command:
$ fc-cache -f -v
You can confirm that the fonts are installed with the following command:

$ fc-list | grep "Hack"

* How to set major mode according to buffer name for non-file buffers
(setq-default major-mode
  (lambda ()
  (if (db-regexp-match-p special-buffer-regexp (buffer-name))
      (special-mode)(fundamental-mode))))

* regex
https://www.emacswiki.org/emacs/RegularExpression
  .        any character (but newline)
  *        previous character or group, repeated 0 or more time
  +        previous character or group, repeated 1 or more time
  ?        previous character or group, repeated 0 or 1 time
  ^        start of line
  $        end of line
  [...]    any character between brackets
  [^..]    any character not in the brackets
  [a-z]    any character between a and z
  \        prevents interpretation of following special char
  \|       or
  \w       word constituent
  \b       word boundary
  \sc      character with c syntax (e.g. \s- for whitespace char)
  \( \)    start/end of group
  \&lt; \&gt;    start/end of word (faulty rendering: backslash + less-than and backslash + greater-than)
  \_< \_>  start/end of symbol
  \` \'    start/end of buffer/string
  \{3\}    previous character or group, repeated 3 times
  \{3,\}   previous character or group, repeated 3 or more times
  \{3,6\}  previous character or group, repeated 3 to 6 times
  \=       match succeeds if it is located at point
Some Regexp Examples
 [-+[:digit:]]                     digit or + or - sign
 \(\+\|-\)?[0-9]+\(\.[0-9]+\)?     decimal number (-2 or 1.5 but not .2 or 1.)
 \&lt;\(\w+\) +\1\&gt;                     two consecutive, identical words
 \&lt;[[:upper:]]\w*                  word starting with an uppercase letter
  +$                               trailing whitespaces (note the starting SPC)
 \w\{20,\}                         word with 20 letters or more
 \w+phony\&gt;                        word ending by phony
 \(19\|20\)[0-9]\{2\}              year 1900-2099
 ^.\{6,\}                          at least 6 symbols
 ^[a-zA-Z0-9_]\{3,16\}$            decent string for a user name
 <tag[^> C-q C-j ]*>\(.*?\)</tag>  html tag

* Incrementally replace a given string; multiple replace
put cursor in the beginning of the text
call replace-regexp
type: nn
type: \,(+ 1 \#)

https://emacs.stackexchange.com/questions/37898/incrementally-replace-a-given-string
Your replacement string can contain arbitrary lisp code.
From the documentation for replace-regexp:

In interactive calls, the replacement text may contain ‚Äò\,‚Äô followed by a Lisp
expression used as part of the replacement text. Inside of that expression, ‚Äò\&‚Äô
is a string denoting the whole match, ‚Äò\N‚Äô a partial match, ‚Äò#&‚Äô and ‚Äò#N‚Äô the
respective numeric values from ‚Äòstring-to-number‚Äô, and ‚Äò#‚Äô itself for
‚Äòreplace-count‚Äô, the number of replacements occurred so far, starting from zero.

We can use this technique in a number of ways.

Starting at 25
You can modify this by not just adding one, but (in your example) 25:

C-M-% nn \,(+ 25 \#)

Leading zeros
Or we can use format to add leading zeros. This will replace nn with 000, 001, 002, etc. You can combine other lisp code above to start at 001, 025, or whatever you want.

C-M-% nn \,(format "$03d" \#)

......
Yes, you can do that with [query-]replace-regexp in Emacs, by evaluating elisp in your replacement, and utilising the zero-based replacement counter \#. e.g.:
M-x query-regexp-replace RET S1-S2 RET
\,(let ((start (+ 1000 (* 4 \#)))) (format "%d-%d" start (+ start 3))) RET

** You can also use cua-mode.

Select the rectangle r√©gion (all the nn) and then M-x cua-rectangle-mark-mode.

Next, M-n and accept the default values.
* C -h e runs the command view-echo-area-messages
* evil-surround
({  Hello  } world!)
({  Hello  } world!)
cursor on 'e'
ds( : remove ()
ds{ : remove {}
yse]: ({  H[ello]  } world!)
ysiw[: ({ [ Hello ] } world!)     // space
ysiw]: ({  [Hello]  } world!)     // no space
ysiw<em>: ({ <em>Hello</em> } world!)
dst: ({ Hello } world!) // t: tag

* package management
(use-package auto-package-update
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
         auto-package-update-interval 4)
   (auto-package-update-maybe))
With that setup, packages will be updated every 4 days, and the old packages will be removed.

* search in project
+ivy-project-search uses ripgrep. Ripgrep does not obey .projectile files, and I have no intention of implementing that, nor connecting it to projectile-rg because a) it's tremendously slow, b) projectile will be replaced with project.el in the future, and
c) it is redundant with what ripgrep already supports through .ignore and .gitignore files, which all of Doom's file/search commands respect.
Alternatively, you can adjust counsel-rg-base-command with exemption flags to apply to all searches.

To only search lua files: #test -- -t lua. Run $ rg --type-list for comprehensive list of types that Ripgrep supports.

To search any file that matches a glob: #test -- -g*.tar.gz

To search for test, but filter out results with cd in it, use consult‚Äôs sub-search feature: #test#!cd.

Everything before the second # is filtered by ripgrep.

Everything after the second # is filtered by Vertico using Orderless 4, where ! (negatation), = (literal), ~ (fuzzy), % (case insensitive) prefixes are supported.

The # delimiter can be replaced with any arbitrary character. E.g. %test%!cd or *test*!cd.

#word -- -s: search for 'word' case sensitive
* why i commented vi-tilde-fringe
run emacs with --debug-init to find the hook on vi-tilde-fringe-mode thrown an error,
which in turn prevent other hooks being called

that's why my following config didn't work
(add-hook 'js2-mode-hook 'eslintd-fix-mode)

* encoding
‰ª•ÊåáÂÆöÁºñÁ†ÅÈáçËØªÂΩìÂâçbuffer(revert-buffer-with-coding-system)
ÊîπÂèòÂΩìÂâçbufferÁöÑÁºñÁ†Å(set-buffer-file-coding-system):
file (gbk coded) copy from windows, change to utf8 on linux

* quoted-insert C-q
input enter, will type ^M
search and replace with ^J

insert Tab

^M
13	0D	CR	^M	\r	Carriage Return[h]

^J
quoted-insert
C-j
10	0A	LF	^J	\n	Line Feed

%s/^M/^J
https://en.wikipedia.org/wiki/ASCII#ASCII_control_characters
* gm: move the cursor to the middle of current visual line
* Kill process buffer without confirmation?
Remove the corresponding function from the relevant variable :
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
How did I find this ?
kill-this-buffer uses kill-buffer internally, which references the variable kill-buffer-query-functions.
* dired
** bach rename filename
dired-toggle-read-only Ctrl+x Ctrl+q.
wdired-finish-edit Ctrl+c Ctrl+c to commit the changes.
wdired-abort-changes Ctrl+c Ctrl+k to abort the changes.
** sort
In dired, type „ÄêCtrl+u s„Äë, then in prompt, modify it to be -alS.
http://ergoemacs.org/emacs/dired_sort.html
The command is dired-sort-toggle-or-edit: s
c ‚Üí last modification time.
u ‚Üí access time.
S ‚Üí file size.
X ‚Üí file extension.
* \ runs the comman
d evil-execute-in-emacs-stat1e
* font set default font
* tty pty
A tty is a terminal (it stands for teletype - the original terminals used a line
printer for output and a keyboard for input!). A terminal is a basically just a
user interface device that uses text for input and output.

A pty is a pseudo-terminal - it's a software implementation that appears to the
attached program like a terminal, but instead of communicating directly with a
"real" terminal, it transfers the input and output to another program.

For example, when you ssh in to a machine and run ls, the ls command is sending
its output to a pseudo-terminal, the other side of which is attached to the SSH
daemon.
* spc j j   contary to J
spc jh/l  go to the beginning/end of line (and set a mark(use ~ to navigate back) at the previous location in the line)
spc jk  : jump to next line and auto indent if if necessary
spc jJ  : split a quoted string or s-expression and auto-indent
spc J split a quoted string or s-expression in place  : (aabb) --> (aa)(bb)
* / M-y   Á≤òË¥¥Êü•ÊâæÂÜÖÂÆπ
* / C-w  Á≤òË¥¥ÂÖâÊ†áÊâÄÂú®‰ΩçÁΩÆÊñáÊú¨Âà∞minibuffer
* Set custom keybinding for specific Emacs mode
To bind a key in a mode, you need to wait for the mode to be loaded before defining the key. One could require the mode, or use eval-after-load
(add-hook 'emacs-lisp-mode-hook
          (lambda () (local-set-key (kbd "C-c C-o") 'imenu)))
* ÊõøÊç¢
ËØ≠Ê≥ï :[addr]s/Ê∫êÂ≠óÁ¨¶‰∏≤/ÁõÆÁöÑÂ≠óÁ¨¶‰∏≤/[option]
ÂÖ®Â±ÄÔºö:%s/Ê∫êÂ≠óÁ¨¶‰∏≤/ÁõÆÁöÑÂ≠óÁ¨¶‰∏≤/g
[addr] Ë°®Á§∫Ê£ÄÁ¥¢ËåÉÂõ¥ÔºåÁúÅÁï•Êó∂Ë°®Á§∫ÂΩìÂâçË°å„ÄÇ
Â¶ÇÔºö1Ôºå20 ÔºöË°®Á§∫‰ªéÁ¨¨1Ë°åÂà∞20Ë°åÔºõ
% ÔºöË°®Á§∫Êï¥‰∏™Êñá‰ª∂ÔºåÂêå‚Äú1,$‚ÄùÔºõ
‚Äú. ,$‚Äù Ôºö‰ªéÂΩìÂâçË°åÂà∞Êñá‰ª∂Â∞æÔºõ
s : Ë°®Á§∫ÊõøÊç¢
[option] : Ë°®Á§∫Êìç‰ΩúÁ±ªÂûã
Â¶ÇÔºög ÂÖ®Â±ÄÊõøÊç¢;
c Ë°®Á§∫ËøõË°åÁ°ÆËÆ§
p Ë°®Á§∫Êõø‰ª£ÁªìÊûúÈÄêË°åÊòæÁ§∫ÔºàCtrl + LÊÅ¢Â§çÂ±èÂπïÔºâ
ÁúÅÁï•optionÊó∂‰ªÖÂØπÊØèË°åÁ¨¨‰∏Ä‰∏™ÂåπÈÖç‰∏≤ËøõË°åÊõøÊç¢
Ê∫êÂ≠óÁ¨¶‰∏≤ÂíåÁõÆÁöÑÂ≠óÁ¨¶‰∏≤‰∏≠Âá∫Áé∞ÁâπÊÆäÂ≠óÁ¨¶ÔºåÈúÄË¶ÅÁî®\ËΩ¨‰πâ
** ‰æãÂ≠ê
#Â∞ÜThat or this Êç¢Êàê This or that
:%s/\(That\) or \(this\)/\u\2 or \l\1/
‚Äî-
#Â∞Ümgi/r/aboxÊç¢Êàêmgi/r/asquare
:g/mg\([ira]\)box/s//mg//my\1square/g    <=>  :g/mg[ira]box/s/box/square/g
‚Äî-
‚Äî-
#‰ΩøÁî®Á©∫Ê†ºÊõøÊç¢Âè•Âè∑ÊàñËÄÖÂÜíÂè∑ÂêéÈù¢ÁöÑ‰∏Ä‰∏™ÊàñËÄÖÂ§ö‰∏™Á©∫Ê†º
:%s/\([:.]\)  */\1 /g
‚Äî-
#Âà†Èô§ÊâÄÊúâÁ©∫Ë°å
:g/^$/d
‚Äî-
#Âà†Èô§ÊâÄÊúâÁöÑÁ©∫ÁôΩË°åÂíåÁ©∫Ë°å
:g/^[  ][  ]*$/d
‚Äî-
#Âú®Êé•‰∏ãÊù•ÁöÑ6Ë°åÊú´Â∞æÂä†ÂÖ•.
:.,5/$/./
‚Äî-
#È¢†ÂÄíÊñá‰ª∂ÁöÑË°åÂ∫è
:g/.*/m0O  <=> :g/^/m0O
‚Äî-
#ÂØªÊâæ‰∏çÊòØÊï∞Â≠óÁöÑÂºÄÂßãË°å,Âπ∂Â∞ÜÂÖ∂ÁßªÂà∞Êñá‰ª∂Â∞æÈÉ®
:g!/^[0-9]/m$ <=> g/^[^0-9]/m$
‚Äî-
#Â∞ÜÊñá‰ª∂ÁöÑÁ¨¨12Âà∞17Ë°åÂÜÖÂÆπÂ§çÂà∂10ËØçÊîæÂà∞ÂΩìÂâçÊñá‰ª∂ÁöÑÂ∞æÈÉ®
:1,10g/^/12,17t$
~~~~ÈáçÂ§çÊ¨°Êï∞ÁöÑ‰ΩúÁî®
‚Äî-
#Â∞ÜchapterÂºÄÂßãË°å‰∏ãÈù¢ÁöÑÁ¨¨‰∫åË°åÁöÑÂÜÖÂÆπÂÜôÈÅìbeginÊñá‰ª∂‰∏≠
:g/^chapter/.+2w>>begin
‚Äî-
:/^part2/,/^part3/g/^chapter/.+2w>>begin
‚Äî-
:/^part2/,/^part3/g/^chapter/.+2w>>begin|+t$
* C-M-o  split-line
Split current line, moving portion beyond point vertically down.
If the current line starts with `fill-prefix', insert it on the new
line as well.  With prefix ARG, don't insert `fill-prefix' on new line.
* _ (ÊúâÂèÇÊï∞) ‚Äú2_‚Äù: ÁßªÂä®Âà∞‰∏ã‰∏ÄË°åÈ¶ñÈùûÁ©∫
*  rEnter: split line
* C-o Âú®ÊèíÂÖ•Ê®°Âºè‰∏ãÔºöÊöÇÊó∂ËøõÂÖ•Normal mode Ôºå‰ªª‰∏ÄÂëΩ‰ª§ÊâßË°åÂêéÔºåÂõûÂà∞Insert Mode
* [0-9][a-z][x-y]ÂèØ‰ª•ÂåπÈÖçÂØπ‰∫éÂ≠óÁ¨¶ Á©∫Ê†ºÂåπÈÖçÁ©∫Ê†º‰∏çÊòØ\s  %s/ +$//g Âà†Èô§Ë°åÂ∞æÊâÄÊúâÁ©∫Ê†º
* whitespace mode lets u examine invisible chcracter such as tab, the end char of a line
* ssh remote
 /ssh:sdk@172.28.48.113#18022:/
C-x C-f /ssh:user@192.168.1.5:/usr/share/nginx/html/index.html
you can write shortcuts for machines that you use frequently:

dired "/root@192.168.1.5:/"

(defun connect-remote ()
  (interactive)
  (dired "/root@192.168.1.5:/"))
This will open a dired buffer on a remote machine. You can navigate this buffer as you would a local one.

Âú®mac‰∏≠, Áî±‰∫éunix domain socketÁöÑÊñá‰ª∂ÂêçÈïøÂ∫¶ÊúâÈôê(104Â≠óÁ¨¶), ÂæÄÂæÄÊåáÂÆö‰∫ÜÁ´ØÂè£‰ºöÂØºËá¥ÊúÄÁªàÁöÑsocketÊñá‰ª∂ÂêçÊÅ∞Â•ΩË∂ÖËøá‰∫ÜËøô‰∏™ÈôêÂà∂, ‰∫éÊòØÊä•Èîô: ‚Äútoo long for unix domain socket‚Äù.
 ÊñπÊ≥ïÔºö (setq tramp-ssh-controlmaster-options "-o ControlPath=%%C -o ControlMaster=auto -o ControlPersist=no")

* chinese Input
apt -y install fcitx
‰∏ãËΩΩËØçÂ∫ì
M-X  ËøêË°å pyim-dicts-manager
ÈÖçÁΩÆËßÅ https://github.com/tumashu/pyim

* install on windows
windows native built version can not open from git bash or mintty
can be opened from native cmd, or just dbclick to open it
