* c m u: jump to outer parentheses
* 执行shell命令
** M-! cmd RET：
打开一个名为“*Shell Command Output*“的窗口，并把该命令的执行结果显
示在其中。按下”C-x 1“组合键可以关闭这个窗口。由于Shell命令的输出是在一个编辑缓
冲区里，因此我们可以对它进行编辑、保存等操作。
** M-| cmd RET：
运行Shell命令，并使用编辑窗口中选定的区域作为该Shell命令的输入，然后可以选择是否
用该Shell命令的输出来替换编辑窗口中选中的区域。
** C-u M-! cmd RET：
执行一条Shell命令，并将其输出放到编辑区中光标所在的位置处，而不将其输出到”Shell
Command Output“窗口。
** M-x shell：
运行一个子Shell(windows是打开cmd窗口在emacs中），该子Shell对应于emacs中的一个名
为”*Shell*"的缓冲区，此后，我们就可以交互式的运行Shell命令了。
** M-x term：
运行一个子Shell，该子Shell对应于emacs中的一个名为“＊Terminal*”的缓冲区。使用该
命令获得的子Shell是一个完整的Shell的模拟，与我们直接在Shell中操作没有什么差别。
** M-x eshell：
运行emacs shell。该Shell为emacs自己实现的一个shell，而前面运行的shell都为系统中的
shell程序(例如：/bin/csh等）。我们可以通过设置变量shell-file-name来设置emacs所使
用的默认shell
* emacs path with system path
When you start emacs from a shell, emacs inherits shell's environment variables.
(true on Windows, Mac, Linux) On Windows, when you start emacs from GUI, emacs
also inherit environment variables, from the Registry. On Mac OS X, when you
start emacs from GUI, emacs does not inherit environment variables from your
shell, but does inherit the system-wide environment variables from
〔~/.MacOSX/environment.plist〕. On Mac OS X, you can start GUI emacs from
shell, like this: 「nohup /Applications/Emacs.app/Contents/MacOS/Emacs &」.
* find-file-literally
If you wish to edit a file as a sequence of ASCII characters with no special
encoding or conversion, use the M-x find-file-literally command. This visits a
file, like C-x C-f, but does not do format conversion (see Format Conversion in
the Emacs Lisp Reference Manual), character code conversion (see Coding
Systems), or automatic uncompression (see Compressed Files), and does not add a
final newline because of require-final-newline (see Customize Save). If you have
already visited the same file in the usual (non-literal) manner, this command
asks you whether to visit it literally instead.
* 查找替换
C-s : 向前搜索（增量式搜索）；连续C-s，跳到下一个搜索到的目标  
   <Delback> search backwards
C-s RET : 普通搜索
C-r : 向前搜索
C-s RET C-w : 按单词查询
M-% : 查询替换，也就是替换前会询问一下
M-x replace-string : 普通替换
* Navigate
** M-r : 将光标移动到屏幕中间那行
** M-} 移动到下一段， M-{ 移动到上一段。(org:移动下一个标题)
** C-x [ 和 C-x ] ,分别是往上一页和往下一页。这里页是由分页符控制的
** M-g g n  goto-line 移到第n行
** M-n digit-argument 重复下个命令n次
** C-u n universal-argument 重复下个命令n次，n默认为4
** C-l : 重绘屏幕，效果就是当前编辑行移动窗口中央
** C-right : 向前移动一个单词
C-left : 向后移动一个单词
C-up : 向前移动一段
C-down : 向后移动一段
* Edit
M-x erase-buffer
** 移动光标
M-g g: 移到指定行數
C-x r Space a: 記錄目前游標位置到 register a
C-x r j a: 跳到 register a 所儲存的位置
M-m 移动到第一个非空格字符 (back-to-indentation)
M-a 句子头
M-e 句子尾
M-{ 段落头
M-} 段落尾
M-r 窗口中间
M-x goto-char RET N 文件的第 N 字节
M-x goto-line RET N 文件第 N 行
C-M-a 到函数头
C-M-e 到函数尾
C-M-f 到下一个同级语法结构 
C-M-b 到上一个同级语法结构
C-M-d 进入到下一级结构里
C-M-u 进入到上一级结构里
** 删除行
1. C-S-backspace (kill-whole-line)
你按 C-S-backspace 键，即命令 kill-whole-line 就可以把光标所在行全部删
掉， Emacs 预定义好的
** 删除列
M-x cua-mode， 再后ctrl + enter可以进行选择,
选完一列之后 ctrl + d 删除 
另一种方法是使用ctrl + x  r  系列的快捷键,先用C-space或者C-@设一个mark，移动光标到另一点，用以下命令进行列操作：
C-x r k 剪切一个矩形块
C-x r y 粘贴一个矩形块
C-x r o 插入一个矩形块
C-x r c 清除一个矩形块(使其变成空白)
C-x r t 在选定区域的所有列前插入样的字符
** 剪贴
C-x r k : 执行矩形区域的剪切
C-x r y : 执行矩形区域的粘贴
M-space (redefined): 设置mark; C-@ 是默认命令
C-w kill-region
C-k kill-line
C-M-k kill-sexp 这个比较复杂 它表示删除一个结构单元。对不同类型的文档（c java
文本 等）一个结构单元表示不同的含义。你可以尝试一下。(比如，你移动到一个
括号的开头，按下，则删除整个括号内的内容)
C-d delete-char
M-d kill-word
C-backspace backward-kill-word
M-w kill-ring-save 复制。
M-y y M-y runs the command yank-popM-y runs the command yank-pop
** Replace
M-x query-replace 或 M-% 要把光标移到到要替换的文本前方
* Mult window /Buffer
** Buffer 相关
C-x k : 关闭当前buffer
C-x b : 切换到前一个编辑的buffer
C-x C-b : 列出当前所有buffer
C-x C-s : 保存当前buffer
C-x s : 保存所有未保存的buffer，会提示你是否需要保存
C-x C-w : 文件另存为
** c-x 4
   操作多窗口
*** c-x 4 b （bufname）
    在另一个窗口打开buffer
*** c-x 4 c-o （bufname）
    在另一个窗口打开buffer,但不选中
*** c-x 4 f （filename）
    在另一窗口打开文件
*** c-x 4 d （directory）
*** c-x 4 m （mail-other-window）
*** c-x 4 r （filename）
    在另一窗口只读打开文件
** 重排窗口
| key     | command                             | note                 |
|---------+-------------------------------------+----------------------|
| c-x 1   | delete-other-window                 |                      |
| c-x 4 0 | kill-buffer-and-window              | 关闭当前窗口和缓冲区 |
| c-x ^   | enlarge-window                      |                      |
| c-x {   | shrink-window-horizontally          |                      |
| c-x }   | enlarge-window-horizontally         |                      |
| c-x -   | shrink-window-if-larger-than-buffer |                      |
| c-x +   | balance-windows                     | 所有窗口一样高       |
|         | windowmove-right                    | 切换到右边窗口       |
|---------+-------------------------------------+----------------------|
* dired
stop emacs dired mode from opening so many buffers Use a
(dired-find-alternate-file) instead of Enter

! firefox ret : open current file or marked files with fiefox
*/ : mark all directory  t: toggle marks (mark unmarked and unmark marked
A : search with regex in files to files
**  C-x C-q 
进入编辑模式，在这种模式下，更改右栏文件名，然后键入 C-x C-s （“保存”）
（M-x query-replace 或 M-% ）
** dir some useful
dired mode 下的很多操作都是针对带有 * 标记的文 件，或者后面连续 N 个文件，或者是当前文件。这样 标记文件就很重要，所以才
有很多命令用于标记文件。 这种思路类似于 Windows 的选择操作，先选择一些对 象，然后再实施动作。用正则表达式操作文件

``% R FROM <RET> TO <RET>'' 改变文件名称
``% C FROM <RET> TO <RET>'' 拷贝文件
``% H FROM <RET> TO <RET>'' 硬连接文件
``% S FROM <RET> TO <RET>'' 符号连接文件
例如 : 输入 % m ，可以标记所有名称匹配某个正则表达 式的文件输入 % R ，然后根据提示输入 \(.*\)\.txt ，作为 FROM ，再根据提示输入 \1.doc 作为 TO ，就会把所有选定的文件中的文件 的后缀扩展名称从 txt 变成 doc .

排序
(add-hook 'dired-mode-hook (lambda ()
  (interactive)
  (make-local-variable  'dired-sort-map)
  (setq dired-sort-map (make-sparse-keymap))
  (define-key dired-mode-map "s" dired-sort-map)
  (define-key dired-sort-map "s"
              '(lambda () "sort by Size"
                (interactive) (dired-sort-other (concat dired-listing-switches "S"))))
  (define-key dired-sort-map "x"
              '(lambda () "sort by eXtension"
                 (interactive) (dired-sort-other (concat dired-listing-switches "X"))))
  (define-key dired-sort-map "t"
              '(lambda () "sort by Time"
                 (interactive) (dired-sort-other (concat dired-listing-switches "t"))))
  (define-key dired-sort-map "n"
              '(lambda () "sort by Name"
                 (interactive) (dired-sort-other (concat dired-listing-switches ""))))))
s s 按照文件大小排序。
s x 按照文件扩展名排序。
s t 按照文件访问时间排序。
s b 按照文件名称的字母顺序排序。
目录在前面
(defun sof/dired-sort ()
  "Dired sort hook to list directories first."
  (save-excursion
    (let (buffer-read-only)
      (forward-line 2) ;; beyond dir. header
      (sort-regexp-fields t "^.*$" "[ ]*." (point) (point-max))))
  (and (featurep 'xemacs)
       (fboundp 'dired-insert-set-properties)
       (dired-insert-set-properties (point-min) (point-max)))
  (set-buffer-modified-p nil))
(add-hook 'dired-after-readin-hook 'sof/dired-sort)

搜索文字

% g dired-mark-files-containing-regexp :: 标记所有包含某个正则表达式的文件。

对于 find 命令的接口

Unix 系统下的 find 命令可以做各种各样的查找，M-x find-dired 可以提供 find 命令 的接口，把find 命令的结果作为一个虚拟的 dir ，用 dired mode 显示，所有 dired 的 操作依然有用。这是很有用的，例如，遍历子目录下的的所有 .cc 文件，然后在这些文 件中查找并替换，首先M-x find-dired 过滤出所有 .cc 文件，产生一个虚拟的 dired ， 然后运行 M-x dired-do-query-replace-regexp 。还有很多其他操作。

对于 Windows 用户，隐藏掉不需要的信息。

(defvar wcy-dired-mode-hide-column-regex
  "^\\s-\\{2\\}[drwx-]\\{10\\}\\s-+[0-9]+\\s-+\\sw+\\s-+\\sw+"
  "doc")
(defun wcy-dired-mode-hide-column ()
  (interactive)
  (when (eq major-mode 'dired-mode)
    (save-excursion
      (save-match-data
        (goto-char (point-min))
        (while (re-search-forward wcy-dired-mode-hide-column-regex nil t nil)
          (let ((o (make-overlay (match-beginning 0) (match-end 0))))
            (overlay-put o 'invisible t)
            (overlay-put o 'id 'wcy-dired-mode-hide-column)))))))

(defun wcy-dired-mode-show-column ()
  (interactive)
  (when (eq major-mode 'dired-mode)
    (mapc (lambda (o)
            (if (eq (overlay-get o 'id) 'wcy-dired-mode-hide-column)
                (delete-overlay o)))
          (overlays-in (point-min) (point-max)))))
;; 注意和 (add-hook 'dired-after-readin-hook 'sof/dired-sort) 的冲突要保证
;; dired-after-readin-hook 中 wcy-dired-mode-hide-column 在 sof/dired-sort 之后
(when (eq system-type 'windows-nt)
(add-hook 'dired-after-readin-hook 'wcy-dired-mode-hide-column t nil))
** dired keys
和文件一样打开目录或通过 C-x d 都可以进入目录的 Dired 缓冲中。这里是打开 Dired-x 之后默认的绑定。说明后面[]中的符号的意义：
查看文本打印
[*] 作用在已标记的所有文件(目录)或光标所在当前文件(目录)上。  
  [p] 用前缀参数表示文件个数，从当前文件开始，正数向下、负数向上。  
  [u] 用前缀参数改变默认行为。对于设置标记的命令一般变为去掉标记。  
  [x] 需要加载 dired-x。  
? 简单帮助
h 模式帮助

m 标记文件，下移一行 [p]
u 去掉标记，下移一行 [p]
U 去掉缓冲中所有的标记
M-Backspace 去掉缓冲中所有的某个标记，缺省为 * 标记
Backspace 并去掉上一行标记，并上移一行 [p]
t 标记/未标记互换
D 删除所有标记的文件/目录 [*]
d 设置“删除标记”（字符D），并且光标下移一行 [p]
x 删除用 d 标记的文件/目录
~ 将缓冲中备份文件做删除标记 [u]
& 没用的文件，做删除标记
# 将缓冲中自动保存的文件做删除标记 [u]
. 按备份文件版本，将备份文件做删除标记 [u]
% g 标记所有“含有”regexp 的文件 [u]
\* * 标记所有可执行文件 [u]
\* . 标记所有同扩展名文件 [ux]
\* / 标记所有目录 [u]
\* @ 标记所有符号连接 [u]
\* c 改变标记的符号
% d 通过匹配 regexp 标记删除
% m 通过匹配 regexp 标记 [u]
复制、移动、创建 文件或目录以及连接

C-x C-f 创建文件
+ 创建目录
R 文件的重命名/移动 [p*]
C 复制文件 [*]
S 创建文件的 Symbol link (绝对路径) [p*]
Y 创建文件的 Symbol link (相对路径) [px*]
H 创建文件的 Hard link [p*]
% C 复制匹配 regexp 的文件 [p*]
% S 创建匹配 regexp 的 Symbol link (绝对路径) [p*]
% Y 创建匹配 regexp 的 Symbol link (相对路径) [p*]
% H 创建匹配 regexp 的 Hark link [p*]
修改文件名、属性

M 修改文件 rwx 权限属性 [*]
G 修改文件 Group 属性 [p*]
O 修改文件 Owner 属性 [p*]
T 修改文件的时间戳 [p*]
% l 文件名逐一改为小写 [p*]
% u 文件名逐一改为大写 [p*]
% R, % r 重命名/移动匹配 regexp 的文件 [p*]
访问文件，目录

e, f, RET 打开文件或目录
a 打开文件或目录，并替换当前缓冲
v 使用 view 模式查看文件，q 退出，有些文件使用外部查看程序调用
o 另一个窗口中，打开文件或目录
C-o 另一个窗口中，打开文件或目录，但当前窗口不变
F 打开(多个)文件 [x*]
I 使用 Info 模式查看文件
N 使用 man 模式查看文件，若有前缀参数，提示输入处理命令 [ux*]
V 使用 RMAIL 模式查看文件 [x]
退出

^ 访问目录的父目录，若有前缀参数在另外的窗口中打开 [u]
q 退出缓冲，若有前缀参数则关闭缓冲 [u]
隐藏/刷新缓冲中内容

s 互换缓冲中“文件名/时间”排序 [u]
C-u s 修改传递给 ls 的参数，即修改每行的内容
i 把当前行的子目录插入缓冲中
M-o 隐藏/显示部分次要文件，使缓冲更简便，若有前缀参数标记隐藏的文件 [ux]
$ 隐藏/显示当前目录中内容 [p]
M-$ 隐藏/显示缓冲中所有目录内容
k 隐藏文件，按 g 可以再显示出来 [p*]
l 刷新缓冲文件 [p*]
g 刷新缓冲所有文件
C-/, C-_, C-x u dired 模式的 undo
其他

= 比较文件
M-= 文件和备份之间比较，若有前缀参数，提示输入 diff 选项 [u]
w 复制文件名到 kill-ring [p*]
Z 压缩/解压缩文件 [p*]
X 在文件上执行 shell 命令 [p*]
B 编译(Emacs Lisp)文件 [p*]
L 加载(Emacs Lisp)文件 [p*]
y 给出文件类型信息 (通过 file 命令)
P 打印文件 [p*]
dired-x.el 中的其他有用的函数

查看文本打印
dired-mark-extension    按后缀标记  
查看文本打印
dired-mark-extension    按后缀标记  
dired-flag-extension 按后缀标记删除
查看文本打印
dired-clean-patch       标记删除 patch 文件  
  dired-clean-tex         标记删除 tex 编译文件  
  dired-very-clean-tex    标记删除 tex 编译文件  
  dired-jump              跳转到当前缓冲所在目录  
  dired-jump-other-window 在另一个窗口中跳转到当前缓冲所在目录  
  dired-omit-here-always  在当前目录生成 .dired  文件  
