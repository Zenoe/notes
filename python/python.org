 /ssh:sdk@172.28.48.113#18022:/
cd /home/sdk/ssp/lzy/sonic-ra/src/sonic-sairedis/SAI/test/saithrift

* post file
import requests
import os

# URL to which you want to post the multipart data
url = 'https://example.com/upload'

# Path to the binary file you want to post
file_path = 'path/to/your/binary/file.bin'

# Extract the filename from the file path
filename = os.path.basename(file_path)
desired_extension = '.xxx'  # Replace with the required extension

# Check if the filename already ends with the desired extension
if not filename.endswith(desired_extension):
    filename = f"{filename}{desired_extension}"

# Prepare the data for the multipart request
files = [('file', (filename, open(file_path, 'rb')))]
data = {'key': 'value'}  # Additional form data, if needed

# Send the multipart POST request
response = requests.post(url, files=files, data=data)

# Check the response status
if response.status_code == 200:
    print('Multipart request successfully posted!')
else:
    print(f'Failed to post multipart request. Status code: {response.status_code}')

* re
re.search vs re.match vs re.find

In Python's re module, there are three commonly used functions for pattern matching within strings: re.search(), re.match(), and re.findall(). Each of these functions serves a specific purpose when it comes to regular expression pattern matching:

re.search(): This function searches for a pattern anywhere within a given string. It returns a match object if the pattern is found in the string, or None if no match is found. It finds the first occurrence of the pattern in the string.

import re

pattern = r'abc'
text = 'abcdefg'

match = re.search(pattern, text)

if match:
    print(f'Match found: {match.group()}')  # Match found: abc
else:
    print('No match found')
re.match(): This function matches a pattern only at the beginning of a string. It returns a match object if the pattern matches at the beginning of the string, or None if there is no match. It does not search for the pattern throughout the entire string.

import re

pattern = r'abc'
text = 'abcdefg'

match = re.match(pattern, text)

if match:
    print(f'Match found: {match.group()}')  # Match found: abc
else:
    print('No match found')
re.findall(): This function finds all non-overlapping matches of a pattern in a string and returns them as a list of strings. It scans the entire string and returns all matches, not just the first one.

import re

pattern = r'abc'
text = 'abcdefgabcxyzabc'

matches = re.findall(pattern, text)

print(f'Matches found: {matches}')  # Matches found: ['abc', 'abc', 'abc']
In summary:

re.search() looks for the pattern anywhere in the string.
re.match() looks for the pattern only at the beginning of the string.
re.findall() finds all non-overlapping occurrences of the pattern in the entire string.
* subprocess wildcard usage
1.
You need to supply shell=True to execute the command through a shell interpreter. If you do that however, you can no longer supply a list as the first argument, because the arguments will get quoted then. Instead, specify the raw commandline as you want it to be passed to the shell:

 proc = subprocess.Popen('ls *.bc', shell=True,
                                    stdout=subprocess.PIPE,
                                    stderr=subprocess.PIPE)

2.
Expanding the * glob is part of the shell, but by default subprocess does not send your commands via a shell, so the command (first argument, ls) is executed, then a literal * is used as an argument.

This is a good thing, see the warning block in the "Frequently Used Arguments" section, of the subprocess docs. It mainly discusses security implications, but can also helps avoid silly programming errors (as there are no magic shell characters to worry about)

My main complaint with shell=True is it usually implies there is a better way to go about the problem - with your example, you should use the glob module:

import glob
files = glob.glob("*.bc")
print files # ['file1.bc', 'file2.bc']
* pyvenv
install pyenv: curl https://pyenv.run | bash
python3.12 -m venv myenv  # 使用 Python 3.12 创建虚拟环境
激活虚拟环境
source myenv/bin/activate
退出虚拟环境
deactivate

# install python3.10.10 needs the following extra libs
apt install libsqlite3-dev tk-dev libffi-dev

https://blog.kyomind.tw/ubuntu-pyenv/

install:
sudo apt-get install -y --no-install-recommends make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev

git clone https://github.com/pyenv/pyenv.git ~/.pyenv

list installed version: pyenv versions

pyenv install -l # Available versions:
pyenv global 3.8.12

pyenv install 3.8.12
pyenv virtualenv 3.8.12 luffy
pyenv activate luffy
pyenv deactivate luffy
pyenv uninstall luffy

* pdb
** import traceback
import traceback
for line in traceback.format_stack():
    print(line.strip())
** list all attribute
p dir(a)
# epdb1.py -- experiment with the Python debugger, pdb
** pdb.set_trace()
import pdb
a = "aaa"
pdb.set_trace()
b = "bbb"
c = "ccc"
final = a + b + c
print final
Now run your script:

$ python epdb1.py
(Pdb) p a
'aaa'
(Pdb)

It is possible to execute arbitrary Python expressions using pdb. For example, if you find a mistake, you can correct the code, then type a type expression to have the same effect in the running code
** mx pdb
通过M-x pdb可调出pdb对python代码进行调试。但是发现在Windows系统中，总进入不了调试模式。主要原因有：

1. windows中，找不到pdb.py位置。需自己制定pdb的路径。可以通过下面的方法设置pdb的路径：
;; pdb setup, note the python version
(setq pdb-path 'c:/python25/Lib/pdb.py
       gud-pdb-command-name (symbol-name pdb-path))
 (defadvice pdb (before gud-query-cmdline activate)
   "Provide a better default command line when called interactively."
   (interactive
    (list (gud-query-cmdline pdb-path
                 (file-name-nondirectory buffer-file-name)))))

2. Run pdb (like this): python -i -m pdb test.py  // "-i"  可以不要

** ipdb
ipdb is a version of pdb for IPython. It allows the use of pdb with all the IPython features including tab completion.
It is also possible to set pdb to automatically run on an uncaught exception.
Pydb was written to be an enhanced version of Pdb. Benefits?

* scope
if condition:
  x = 'something'
else:
  x = 'something else'

use(x)

Python does not have block-level scopes. Be careful, though, with examples such as

if False:
    x = 3
print(x)
which would clearly raise a NameError exception.

Python variables are scoped to the innermost function, class, or module in which they're assigned. Control blocks like if and while blocks don't count, so a variable assigned inside an if is still scoped to a function, class, or module.
* iterate two array
for f, b in zip(foo, bar):
    print(f, b)
* decode
http://blog.csdn.net/xyw_blog/article/details/40188037
字符串在Python内部的表示是unicode编码，因此，在做编码转换时，通常需要以unicode作为中间编码，即先将其他编码的字符串解码（decode）成unicode，再从unicode编码（encode）成另一种编码。
** chardet.detect(obj)
    titem = item.decode('GB2312')
    result = chardet.detect(titem) # ValueError: Expected a bytes object, not a unicode object
chardet.detect expects a bytes object, not a unicode object
** str(tdata).encode('utf8')   :error:
 UnicodeDecodeError: 'ascii' codec can't decode byte 0xe9 in position 103: ordinal not in range(128)
 print str(tdata).decode('utf8')   :OK:
tdata is of 'utf8' encoding, decode it form 'utf8' and encoded it to other type
** decode([encoding], [errors])
<type 'str'> to <type 'unicode'>
interprets the string using the given encoding:
** .encode([encoding], [errors='strict'])
<type 'unicode'> to <type 'str'>
returns an 8-bit string version of the Unicode string, encoded in the requested encoding.
** 代码中字符串的默认编码与代码文件本身的编码一致。
*** s='中文'  如果是在utf8的文件中，该字符串就是utf8编码
*** s=u'中文'
则该字符串的编码就被指定为unicode了，即python的内部编码，而与代码文件本身的编码无关。
如果一个字符串已经是unicode了，再进行解码则将出错，因此通常要对其编码方式是否为unicode进行判断：
isinstance(s, unicode)  #用来判断是否为unicode
用非unicode编码形式的str来encode会报错
** 如何获得系统的默认编码？
#!/usr/bin/env python
#coding=utf-8
import sys

# aa = u'中'
# bb = '中'
# print aa.encode('utf8')
# print bb
# print aa  # UnicodeEncodeError: 'ascii' codec can't encode character u'\u4e2d' in position 0: ordinal not in range(128)

print sys.getdefaultencoding()
s=u"中文"
print s
如果提示：UnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)。这是因为控制台信息输出窗口是按照ascii编码输出的
（英文系统的默认编码是ascii），而上面代码中的字符串是Unicode编码的，所以输出时产生了错误。
将最后一句改为：print s.encode('gb2312')
则能正确输出“中文”两个字。
若最后一句改为：print s.encode('utf8')
则输出：\xe4\xb8\xad\xe6\x96\x87，这是控制台信息输出窗口按照ascii编码输出utf8编码的字符串的结果。
unicode(str,'gb2312')与str.decode('gb2312')是一样的，都是将gb2312编码的str转为unicode编码
# code snippet
#!/usr/bin/env python
#coding=utf-8
s="中文"

if isinstance(s, unicode):
#s=u"中文"
print s.encode('gb2312')
else:
#s="中文"
print s.decode('utf-8').encode('gb2312')

编码：unicode-->str;解码str-->unicode如果我们调用str.encode(),这里涉及到一个隐式
的类型转化，会现将str转化成unicode，才能进行编码，这也是不太容易理解的地方。所以，
str.encode()实际上就等价于str.decode(sys.defaultencoding).encode().而
sys.defaultencoding一般是ascii，它是不能用来编码中文字符的。
* pip
pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jupter
pip install 'stevedore>=1.3.0,<1.4.0'

* jupyter
generate default config
    jupyter notebook --generate-config

vi ~/.jupyter/jupyter_notebook_config.py

c.NotebookApp.password = 'sha1:1b4ea9662b35:3e3d6a823d264d466f125a0939623c05e7b66007'
c.NotebookApp.ip='*'#×允许任何ip访问
c.NotebookApp.open_browser = False
c.NotebookApp.port =8888 #可自行指定一个端口, 访问时使用该端口

服务器开启
jupyter notebook
jupyter notebook  --allow-root

* telnetlib
    tn = telnetlib.Telnet(server)
    # need to wait for '#' to run-system-shell
    tn.read_until(b"#")
    tn.write(b"run-system-shell\n")
    tn.write(b"ls\n")

    # tn.write(b"configure terminal\n")
    # tn.write(b"show version devices\n")
    # tn.write(b'show arp\n')
    # tn.write(b"end\n")

    tn.write(b"exit\n")
    tn.write(b"exit\n")
    output = tn.read_all()
    print(output.decode('ascii'))
* print dict
pprint.pprint(data)
import json
print(json.dumps(data, indent=4))

* # The http.server module in Python is a very basic HTTP server and doesn’t include CORS headers by default,  thus do not support cors request
cors server
import http.server
import socketserver
class CORSRequestHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type, X-Custom-Header')
        if self.command == 'OPTIONS':
            self.send_response(200)
            self.end_headers()
            return
        super().end_headers()

if __name__ == "__main__":
    PORT = 8081
    with socketserver.TCPServer(("", PORT), CORSRequestHandler) as httpd:
        print(f"Serving at port {PORT}")
        httpd.serve_forever()
