Command	New Files	Modified Files	Deleted Files	Description
git add -A	✔️	✔️	✔️	Stage all (new, modified, deleted) files
git add .	✔️	✔️	✔️	Stage all (new, modified, deleted) files in current folder
git add -u	❌	✔️	✔️	Stage modified and deleted files only
git add --ignore-removal .	✔️	✔️	❌	Stage new and modified files only
* git line ending :carriage:return:
Make 'git diff' ignore ^M
GitHub suggests that you should make sure to only use \n as a newline character in git-handled repos. There's an option to auto-convert:
git config --global core.autocrlf true
* git checkout -b BRANCH_NAME creates a new branch and checks out the new branch while git branch BRANCH_NAME creates a new branch but leaves you on the same branch.

In other words git checkout -b BRANCH_NAME does the following for you.

git branch BRANCH_NAME    # create a new branch
git switch BRANCH_NAME    # then switch to the new branch
* [[https://stackoverflow.com/questions/68775869/support-for-password-authentication-was-removed-please-use-a-personal-access-to][Support for password authentication was removed. Please use a personal access token instead]]
From 2021-08-13, GitHub is no longer accepting account passwords when authenticating Git operations. You need to add a PAT (Personal Access Token) instead, and you can follow the below method to add a PAT on your system.

[[https://stackoverflow.com/questions/68775869/message-support-for-password-authentication-was-removed-please-use-a-personal][Create Personal Access Token on GitHub]]
From your GitHub account, go to Settings → Developer Settings → Personal Access Token → Generate New Token (Give your password) → Fillup the form → click Generate token → Copy the generated Token, it will be something like ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta

* proxy
git config --global --unset http.proxy
git config --global --get http.proxy

git config --global https.proxy ''

git config --global https.proxy http://10.110.198.52:20171
git config --global http.proxy http://10.110.198.52:20171

set HTTP_PROXY=http://10.110.198.52:20171
set HTTPS_PROXY=http://10.110.198.52:20171


git config --global https.proxy http://10.110.198.52:20172
git config --global http.proxy http://10.110.198.52:20172

set HTTP_PROXY=http://10.110.198.52:20172
set HTTPS_PROXY=http://10.110.198.52:20172
export http_proxy=
export https_proxy=
set http_proxy=http://10.110.198.52:20172
set https_proxy=http://10.110.198.52:20172
git push origin master

windows:
netsh winhttp show proxy
netsh winhttp set proxy "10.110.198.52:20171"
set HTTP_PROXY=http://10.110.198.52:20171
set HTTPS_PROXY=http://10.110.198.52:20171

Bash (MSYS2, Git Bash, etc.)
export HTTP_PROXY="http://proxy.example.com:8080"
export HTTPS_PROXY="http://proxy.example.com:8080"
export FTP_PROXY="http://proxy.example.com:8080"
export NO_PROXY="localhost,127.0.0.1,::1,*.local"

powershell
$env:HTTP_PROXY = "http://10.110.198.52:20172"
$env:HTTPS_PROXY = "http://10.110.198.52:20172"
* git show
git show shows the changes made in the most recent commit. It is equivalent to git show HEAD.
git show HEAD~1 takes you back one commit.
* git checkout previous
git checkout HEAD^ foo
* git restore all
git reset --hard
git clean -f -d
git checkout HEAD
* delete untracked files
git clean -d -x -f
This removes untracked files, including directories (-d) and files ignored by git (-x).

Also, replace the -f argument with -n to perform a dry-run or -i for interactive mode and it will tell you what will be removed.
* revert commit
To restore everything back to the way it was prior to the last commit, we need to reset to the commit before HEAD:
git reset --soft HEAD^     # use --soft if you want to keep your changes
git reset --hard HEAD^     # use --hard if you don't care about keeping the changes you made

git reflog
git reset --hard 5a7404742c85
git reset --soft 5a7404742c85
* git pull: There is no tracking information for the current branch
You could specify what branch you want to pull:

git pull origin master
Or you could set it up so that your local master branch tracks github master branch as an upstream:

git branch --set-upstream-to=origin/master master
git pull
This branch tracking is set up for you automatically when you clone a repository (for the default branch only), but if you add a remote to an existing repository you have to set up the tracking yourself. Thankfully, the advice given by git makes that pretty easy to remember how to do.

--set-upstream is deprecated in git 1.9.x, apparently. Going forward you'd want to use something like git branch -u origin/master, assuming you've checked out master already. If not, git branch -u origin/master master will wor
* git diff
git diff HEAD:tools/mserver/mserver5.c HEAD^^:tools/mserver/mserver5.c
git diff hash1 hash2 filename
git diff HEAD~2 HEAD -- main.c
NOTICE: that path separator must be '/' but not '\'
git diff hash~ hash

To create a patch with both modified & new files (staged) you can run:
git diff HEAD > file_name.patch
* git remote -v show url
* only commit some hunks(add only a specific part to the staging area.)
git add -p file
* delete all commit history in github
Deleting the .git folder may cause problems in your git repository. If you want to delete all your commit history but keep the code in its current state, it is very safe to do it as in the following:

git checkout --orphan latest_branch
Add all the files

git add -A
Commit the changes

git commit -am "commit message"
Delete the branch

git branch -D master
Rename the current branch to master

git branch -m master
Finally, force update your repository

git push -f origin master
Hope this helps. PS: this will not keep your old commit history around :)
forget all about the option settings in ~/.subversion/ foloders
rm ~/.subversion/ && svn update
enter username and password

Somewhat surprisingly, looking at the configs in .subversion, none of the settings are uncommented; they're all set to the defaults
* git log
git log --pretty=format:'%C(yellow)%h %Cred%ad %Cblue%an%Cgreen%d %Creset%s' --date=short

git log --pretty=format:"%h%x09%an%x09%ad%x09%s"

To shorten the date (not showing the time) use --date=short

In case you were curious what the different options were:
%h = abbreviated commit hash
%x09 = tab (character for code 9)
%an = author name
%ad = author date (format respects --date= option)
%s = subject

git log --author=Smith
git log --author="\(Adam\)\|\(Jon\)"

* cannot run gpg: No such file or directory
What is the output of the command below. I suspect you have commit.gpgsign=true

git config --global --list | grep commit
You can disable it with

git config --global --add commit.gpgsign false
or by removing the line manually from ~/.gitconfig.

* error: gpg failed to sign the data
disable automatic gpg signing ->
git config --global --get commit.gpgsign

* svn revert to old version
svn update -r 135

* svn revert skipped files
svn st
A       .
!M      ic-rabbit@2x.png
!M      ic-snail@2x.png

svn revert ic_star@2x.png
Skipped 'ic_star'

svn revert ./ --depth infinity
Reverted '.'
Reverted 'ic-rabbit@2x.png'
Reverted 'ic-snail@2x.png'

* git push can push all branches or a single one dependent on this configuration:

Push all branches
git config --global push.default matching
It will push all the branches to the remote branch and would merge them

Push only the current branch
git config --global push.default simple

* svn commit all except one
1. svn diff file4 > tmp.patch
svn revert file4
svn ci -m "Commit 1"
svn patch tmp.patch

2. svn ci -m "Commit 1" `svn st | awk '{print $NF}' | grep -v file4`

* install svn server
** Step 1 – Install Apache
sudo apt-get install apache2
** Step 2 – Install SVN Server
Also, install svn module for Apache libapache2-mod-svn packages on your system.

sudo apt install subversion libapache2-mod-svn libapache2-svn libsvn-dev
sudo apt install subversion libapache2-mod-svn libsvn-dev
After installation, enable required Apache modules and restart Apache service.

sudo a2enmod dav dav_svn
sudo service apache2 restart
** Step 3 – Create First SVN Repository
Use the following commands to create your first svn repository with name myrepo. Also, set the required permissions on newly created directories.

sudo mkdir -p /var/lib/svn/

name='rfscripttool'
sudo mkdir -p /var/lib/svn/${name}
sudo svnadmin create /var/lib/svn/${name}
sudo chown -R www-data:www-data /var/lib/svn/${name}
sudo chmod -R 775 /var/lib/svn/${name}

如果后面再新建的子目录，要再执行一遍 chown, 不然会无法写入
** Step 4 – Create Users
Now create first svn user in /etc/apache2/dav_svn.passwd file. These users will use for authentication of svn repositories for checkout, commit processes.

sudo touch /etc/apache2/dav_svn.passwd
sudo htpasswd -m /etc/apache2/dav_svn.passwd admin
pass:   sdnsvn

create additional users
sudo htpasswd -m /etc/apache2/dav_svn.passwd lzy
pass: lzy0

** Step 5 – Configure Apache with Subversion
sudo vi /etc/apache2/mods-enabled/dav_svn.conf
<Location /svn>

   DAV svn
   SVNParentPath /var/lib/svn

   AuthType Basic
   AuthName "Subversion Repository"
   AuthUserFile /etc/apache2/dav_svn.passwd
   Require valid-user

</Location>

change default ports in /etc/apache2/ports.conf

Save the file and restart the Apache service to apply the new configuration.

sudo service apache2 restart
** Step 6 – Access Repository in Browser
Use HTTP URLs to access your repository in the browser. It will prompt for authentication. Use login credentials created in Step 5. Change example.com with your system hostname, domain name or IP address.
 http://example.com/svn/myrepo/

** To configure Apache2 with `mod_authz_svn` for Subversion (SVN) repositories
# Assign read and write access according to each project and user.
you typically need to make changes to your Apache configuration file. Below is a basic example of how you can set up authentication and authorization for SVN using `mod_authz_svn`:

1. **Enable necessary Apache modules**:
   Ensure that the required Apache modules are enabled:
   ```bash
   sudo a2enmod dav_svn
   sudo a2enmod authz_svn
   ```

2. **Create a Subversion repository**:
   Create a Subversion repository where you will store your code:
   ```bash
   sudo svnadmin create /path/to/your/repository
   ```

3. **Configure Apache virtual host**:
   Edit your Apache configuration file (e.g., `/etc/apache2/sites-available/your-site.conf`) and add the following configuration:

   ```apache
   <Location /svn>
       DAV svn
       SVNPath /path/to/your/repository

       AuthType Basic
       AuthName "Subversion Repository"
       AuthUserFile /etc/apache2/dav_svn.passwd
       Require valid-user

       AuthzSVNAccessFile /etc/apache2/dav_svn.authz
   </Location>
   ```

4. **Create an Apache password file**:
   Create a password file for Apache authentication:
   ```bash
   sudo htpasswd -c /etc/apache2/dav_svn.passwd username
   ```

5. **Create an authorization file**:
   Create an authorization file to control access to the repository:
   ```bash
   sudo touch /etc/apache2/dav_svn.authz
   ```
   Populate the `dav_svn.authz` file with the appropriate access control rules. For example:
   ```
   [repository:/]
   username = rw
   ```

6. **Restart Apache**:
   After making these changes, restart Apache to apply the configuration:
   sudo systemctl restart apache2

   我们还可以通过规则的继承, 显式地阻止用户的权限, 方法是把用户名 设置成空:

[calc:/branches/calc/bug-142]
harry = rw
sally = r

[calc:/branches/calc/bug-142/secret]
harry =
在这个例子里, Harry 对整个 bug-142 目录具有 读写权限, 但却无法访问其中的子目录 secret.

* svn:global-ignore 属性
如果您希望在整个仓库中设置全局忽略规则，可以使用 svn:global-ignore 属性。这个属性通常在 SVN 客户端的配置文件中设置，但也可以在仓库中设置。

设置 svn:global-ignore
打开 SVN 客户端配置文件（通常位于 ~/.subversion/config）：

nano ~/.subversion/config
找到 [miscellany] 部分，并添加您希望忽略的模式，例如：

[miscellany]
global-ignores = *.log temp
