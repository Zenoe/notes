#+TITLE:
ansible -i hosts master_servers -m ping
ansible -i /opt/omcHosts frontServers -a 'systemctl start keepalived'
ansible -i hosts all -m setup -a "filter=ansible_distribution*"

ansible -i hosts all -m setup -a "filter=ansible_distribution*"
bdnode1 | SUCCESS => {
    "ansible_facts": {
        "ansible_distribution": "CentOS",
        "ansible_distribution_file_parsed": true,
        "ansible_distribution_file_path": "/etc/redhat-release",
        "ansible_distribution_file_variety": "RedHat",
        "ansible_distribution_major_version": "7",
        "ansible_distribution_release": "Core",
        "ansible_distribution_version": "7.3.1611"
    },
    "changed": false
}

...

"-i hosts" is not needed if there exists ansible.cfg which indicates the hosts position
ansible all -m setup -a "filter=ansible_distribution*"

echo "[defaults]
inventory      = ruijie-cdh-playbook/hosts
forks          = 10
host_key_checking = False
" > ansible.cfg

* when
- name: Set disable repos
  set_fact: disable_repos="{% set disable_list=[] %}{%for repo in ['epel', 'base', 'extras', 'updates']%}{%if repo in repo_list.stdout%}{{disable_list.append(repo)}}{%endif%}{%endfor%}{{disable_list|join(',')}}"
  when: ansible_distribution|lower == "centos" and "7.3" in ansible_distribution_version

- name: install audit 2.7
  yum: name={{idata_home}}/rpm/docker_dependency/audit-libs-2.7.6-3.el7.x86_64.rpm state=present
  when: ansible_distribution_version < "7.5"

* hypen
Each dash represents a new item in a list. Anything without a dash, belongs to
something that starts with a dash (depending on its indentation).

Hyphen - is used to specify list items, and colon : is used to specify
dictionary items or key-value pair.

my_list:
  - foo
  - bar

* 'fail' is not a valid attribute for a Play
The fail directive has to be used at the task level.

---
   vars_prompt:
      - name: "var1"
        prompt: "Please pass variable"
        private: no

   tasks:
     - fail: msg="var1 is not passed or blank"
       when: var1 is undefined or ( var1 is defined and storeid == "" )

* var files
vars_files:
  - [ "vars/foo.yml", "vars/bar.yml", "vars/default.yml" ]

* when var on conditions
Ansible when variable contains string


- hosts: all
  vars:
    test1: "Bye World"
  tasks:
  - name: Ansible when variable contains string example example
    debug:
      msg: "Equals"
    when: test1.find("World") != -1

register: output
    when: output.stdout.find("World") != -1

* when, changed_when, failed_when
tasks:
  - name: "shut down Debian flavored systems"
    command: /sbin/shutdown -t now
    when: ansible_os_family == "Debian"


  - hosts: web
  tasks:
  - name: "Determine if the HTTPD is installed"
    register: validatehttpd
    shell: httpd

  - name: Ensure Apache is at the Latest version
    become: yes
    become_user: root
    yum:
      name: httpd
      state: latest
    when: 'not found' in validatehttpd.stdout


    when: (ansible_distribution == "CentOS" and ansible_distribution_major_version == "6") or
          (ansible_distribution == "Debian" and ansible_distribution_major_version == "7")

    when:
      - ansible_distribution == "CentOS"
      - ansible_distribution_major_version == "6"

* Ansible Facts
Ansible collects pretty much all the information about the remote hosts as it
runs a playbook. The task of collecting this remote system information is called
as Gathering Facts by ansible and the details collected are generally known as facts or variables

The ansible ad-hoc command to invoke the ansible setup module is given below.
ansible <hostname (or) hostgroup> -m setup


here are three variables collected by setup module with 3 different type

(Ansible provides a filter named type_debug to get the underlying python data type of a variable or fact The Syntax to use the module is given below
{{ <the variable name> | type_debug }})

ansible_architecture —  Ansible UnSafe Text
ansible_apparmor — Dictionary
ansible_all_ipv4_addresses — List



Unexpected failure in finding the lookup named '{{ansible_mounts}}' in the available lookup plugins"
--------- because low version of ansible (ansible 2.4.2.0)

* inventory logic operator
hosts: master_servers:slave_servers:third_servers   # union

逻辑非与逻辑and
webserver:!phoenix  目标主机必须在组webservers但不在phoenix组中

webservers:&staging  目标主机必须即在组webservers中又在组staging中

webserver:dbservers:&staging:!phoenix
上面这个复杂的表达式最后表示的目标主机必须满足：在webservers或者dbservers组中，
必须还存在于staging组中，但是不在phoenix组中。这些可以看作是SaltStack中Compound
matchers 。

wild card

*.361way.com
*.com

* How to set host_key_checking=false in ansible inventory file?
 you can do it at the host/inventory level (Which became possible on newer ansible versions) or global level:
inventory:

Add the following.

ansible_ssh_common_args='-o StrictHostKeyChecking=no'
host:

Add the following.

ansible_ssh_extra_args='-o StrictHostKeyChecking=no'
hosts/inventory options will work with connection type ssh and not paramiko. Some people may strongly argue that inventory and hosts is more secure because the scope is more limited.
global:
You can do it either in the /etc/ansible/ansible.cfg or ~/.ansible.cfg file:

[defaults]
host_key_checking = False
Or you can setup and env variable (this might not work on newer ansible versions):

export ANSIBLE_HOST_KEY_CHECKING=False

* indentation
both of the two schema of indentation are valid
  tasks:
  - name: test
    debug:
      msg: "{{ inventory_hostname }}"

  tasks:
    - name: test
      debug:
        msg: "{{ inventory_hostname }}"

* sample
ansible-playbook -i hosts test.yml

--
- name: collect the cluster's hosts info
  gather_facts: false
  hosts: physicalServers
  vars_files:
  - "var.yml"

  tasks:
  - name: test
    debug:
      msg: "{{ inventory_hostname }}"

  - name: test
    debug:
      msg: "{{groups['physicalServers'].index(inventory_hostname)}}"

  - name: Set Zookeeper Id
    shell: echo "{{item.0 + 1}}" > /opt/test
    with_indexed_items: "{{groups['physicalServers']}}"
    when: item.1 == "{{inventory_hostname}}"

* inventory_hostname - As configured in the ansible inventory file (eg: /etc/ansible/hosts). It can be an IP address or a name that can be resolved by the DNS
ansible_hostname - As discovered by ansible. Ansible ssh's into the host and gathers some facts. As part of the fact, it also discovers its hostname which is stored in ansible_hostname.
Which one should you use?
hostvars is a dictionary which has an entry for each inventory host. If you want to access host information, you need to use the inventory_hostname. If you want to use/print the name of the host as configured on the host, you should use ansible_hostname since most likely the IP will be used in the inventory file.

Important: To use ansible_hostname, you need to gather facts:

* meta
tasks:
   - shell: some tasks go here
   - meta: flush_handlers
   - shell: some other tasks

* Ansible 任务计时插件 ansible-profile， 安装这个插件之后， 会显示 ansible-playbook 执行每个任务话费的时间。项目地址: http://github.com/jlafon/ansible-profile

* ControlPersist
ControlPersist 特性需要高版本的 SSH 才支持，CentOS 6 默认是不支持的，如果需要使用，需要自行升级 openssh。ControlPersist 即持久化 socket，一次验证，多次通信。并且只需要修改 ssh 客户端就行，也就是 Ansible 机器即可。
升级 openssh 的过程这里不做介绍。这里只介绍下 ControlPersist 设置的办法。

cat ~/.ssh/config
 Host *
  Compression yes
  ServerAliveInterval 60
  ServerAliveCountMax 5
  ControlMaster auto
  ControlPath ~/.ssh/sockets/%r@%h-%p
  ControlPersist 4h
* delegate_to 任务委派
当要在 A 组服务器上执行 playbook 时，需要同时在另外一个不在 A 组的　B 服务器上执行另外操作，这里就可以使用 delegate_to 功能，用来委派任务给 B 服务器。

tasks:
  - name: add host records
    shell: 'echo "172.16.11.1 api.abc.com" >> /etc/hosts'
  - name: add hosts records to center Server
    shell: ‘echo "172.16.11.1 api.abc.com" >> /etc/hosts’
    delegate_to: 172.16.11.211
* 本地操作功能
ansible 默认只会对定义好的被控机执行命令，如果要在本地也执行操作，可以使用 delegate_to 功能，当然还有另外一种更好的方式：local_action

// local_action
- name: add host record to center server
  local_action: shell 'echo "192.168.1.100 test.xyz.com " >> /etc/hosts'
// 当然您也可以使用 connection:local
- name: add host record to center server
  shell: 'echo "192.168.1.100 test.xyz.com " >> /etc/hosts'
* check 模式
使用 check 参数运行 ansible-playbook时，不会对远端主机做任何操作，并带有检测功能，报告 playbook 会对主机做出什么操作。如果 playbook 中带有执行条件，检查就会出错了。

* register
- hosts: all
  gather_facts: no
  tasks:
    - name: echo date
      command: date
      register: date_output
    - name: echo data_output
      command: echo 30
      notify: Hello
      when: date_output.stdout.split(' ')[2] == "18"
  handlers:
    - name: Hello
      debug: msg="Hello"
* 自定义错误判定条件
- name: this command prints FAILED when it fails
  command: /usr/bin/example-command -x -y -z
  register: command_result
  failed_when: "'FAILED' in command_result.stderr"
- name: validate nginx conf
  shell: "/data/app/nginx/sbin/nginx -t"
  register: command_result
  changed_when: command_result.stdout.find('successful')

* 使用 tag 来选择性执行
可能由于某些原因， 在一个大型的 playbook 中，只想执行其中的特定部分，这样就会用到 tag 功能。

- name: yun install package
  yum: name={{ item }} state=installed
  with_items:
     - httpd
     - memcached
  tags:
     - packages
- name: configuration modity
  template: src=templates/src.j2 dest=/etc/foo.conf
  tags:
      - configuration
如果你只想运行 playbook 中的 configuration 和 packages，你可以这样做

ansible-playbook example.yml -tags “configuration,packages”

* until
---
- hosts: all
 connection: local
 tasks:
 - shell: exit 1
 register: task_result
 until: task_result.rc == 0
 retries: 10
 delay: 1
 ignore_errors: yes

---
tasks:
 - shell: echo "do something"; exit 1
 register: command_result
 retries: 5
 delay: 10
 until: command_result | success
